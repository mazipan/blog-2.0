(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{180:function(e,n){e.exports={body:'## Latar Belakang\n\nSeperti sudah saya jelaskan pada tulisan sebelumnya bahwa Blog 2.0 ini hanyalah sebuah static Blog tanpa Backend, pun saya hanya menggunakan jasa static hosting dari Netlify untuk meletakan dan meyajikan file hasil build. Karena saya tidak menggunakan Backend dan tidak ingin menggunakannya, maka saya kesulitan ketika ingin menambahkan fitur yang mengharuskan saya menyimpan data di basis data (*database* -DB) seperti jumlah orang yang *like* suatu artikel. Data seperti itu jelas bukan data yang bisa disimpan di *browser* masing-masing. Datanya harus terpusat dan semua pengunjung melihat jumlah yang sama. Data seperti ini paling ideal ada di DB, apapun jenis DB yang digunakan.\n\nDewasa ini untunglah ada platform seperti [Firebase ↗️](https://firebase.google.com/) yang membantu orang-orang yang males bikin Backend namun tetap bisa menyimpan data secara terpusat. Firebase bukan cuma menyediakan DB untuk kita tapi juga jasa lainnya seperti hosting, otentikasi, cloud storage, analytics, A/B testing, remote config, dynamic link dan berbagai hal keren lainnya. Firebase ini ibarat paket komplit kalau kita mau beli makan siang.\n\nKali ini kita hanya akan menggunakan fitur real-time databasenya saja.\n\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/create-simple-like-button-using-firebase-rtdb/button-like-firebase.png" alt="Button Like Firebase" height="200px" width="200px">\n\n## Membuat Projek di Firebase\n\nPertama kalian harus membuat projek di [Firebase Console ↗️](https://console.firebase.google.com/), kalian bisa memberi nama apapun pada projek kalian tapi nama ini memang harus unik dan belum pernah digunakan oleh orang lain.\n\nBerikutnya kalian akan disuguhi pilihan untuk melakukan setup pada Firebase yang berbeda-beda tergantung jenis projek kalian, kita bisa memilih untuk web dan akan diberikan kode untuk memasang Firebase seperti berikut:\n\n```html\n<script src="https://www.gstatic.com/firebasejs/5.8.3/firebase.js"><\/script>\n<script>\n  // Initialize Firebase\n  var config = {\n    apiKey: "QWERTY-YTREWQ",\n    authDomain: "contoh-aja.firebaseapp.com",\n    databaseURL: "https://contoh-aja.firebaseio.com",\n    projectId: "contoh-aja",\n    storageBucket: "contoh-aja.appspot.com",\n    messagingSenderId: "1234567890"\n  };\n  firebase.initializeApp(config);\n<\/script>\n```\n\nKita tidak bisa *copy-paste* kode ini mentah-mentah, karena projek Blog 2.0 menggunakan Nuxt sebagai framework dan tentu berbeda sedikit cara menggunakannya.\n\nSebelum mulai menyiapkan konfigurasi, saya memilih untuk meletakan nilai-nilai konfigurasi ini kedalam file `.env` agar mudah diubah-ubah nantinya.\n\nSaya membuat file `.env` dengan isi berdasarkan konfigurasi yang didapat dari Firebase seperti berikut:\n\n```bash\nFIREBASE_API_KEY= your firebase `apiKey` config\nFIREBASE_AUTH_DOMAIN= your firebase `authDomain` config\nFIREBASE_DATABASE_URL= your firebase `databaseURL` config\nFIREBASE_PROJECT_ID= your firebase `projectId` config\nFIREBASE_STORAGE_BUCKET= your firebase `storageBucket` config\nFIREBASE_MESSAGING_SENDER_ID= your firebase `messagingSenderId` config\n```\n\nDi Nuxt.js saya menambahkan module `@nuxtjs/dotenv` di file `nuxt.config.js` agar bisa membaca nilai dari `.env` ini, namun belakangan saya mendapati kalau nilai ini tidak diganti ketika proses generate file static dilakukan oleh Nuxt. Saya perlu menambahkan kode berikut pada file `nuxt.config.js` saya:\n\n```javascript\nmodule.exports = {\n  env: {\n    FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,\n    FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,\n    FIREBASE_DATABASE_URL: process.env.FIREBASE_DATABASE_URL,\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,\n    FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID\n  },\n}\n```\n\n## Menyiapkan Kode Konfigurasi\n\nUntuk membuka koneksi ke Firebase, saya membutuhkan dependency `firebase` yang bisa dipasang lewat perintah\n\n```bash\n$ yarn add firebase\n# atau\n$ npm i firebase\n```\n\nSaya memilih untuk meletakan koneksi firebase ini ke dalam folder `plugins` di struktur Nuxt, ini artinya akan ditambahkan di semua halaman yang ada di dalam projek ini.\n\nSaya membuat file `plugins/firebase.js` dan membuat koneksi ke Firebase dengan kode berikut:\n\n```javascript\nimport Vue from \'vue\'\nconst firebase = require(\'firebase/app\')\nrequire(\'firebase/database\')\n\nvar config = {\n  apiKey: process.env.FIREBASE_API_KEY || \'\',\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN || \'\',\n  databaseURL: process.env.FIREBASE_DATABASE_URL || \'\',\n  projectId: process.env.FIREBASE_PROJECT_ID || \'\',\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET || \'\',\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || \'\'\n}\n\nfirebase.initializeApp(config)\nVue.prototype.$firebase = firebase\n```\n\nSelain membuka koneksi ke Firebase saya juga melakukan injeksi objek firebase yang telah disiapkan kedalam *instance* dari Vue agar mudah dipakai di Vue Component nantinya.\n\nSaya perlu menambahkan plugins ini di file `nuxt.config.js` agar terbaca di projek ini dengan kode seperti berikut:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    { src: \'~/plugins/firebase\', ssr: false }\n   ↗️]\n}\n```\n\nSelain harus diinisialisasi, Firebase juga membutuhkan beberapa file seperti `firebase.json`, `.firebaserc` dan `database.rules.json`. File-file ini bisa didapatkan dengan perintah `firebase init` pada folder root projek kita. Namun sebelum itu kalian harus login ke dalam firebase terlebih dahulu dengan perintah `firebase login`.\n\nBerikut contoh file `firebase.json` yang bisa kalian temui juga di projek ini:\n\n```javascript\n{\n  "database": {\n    "rules": "database.rules.json"\n  }\n}\n```\n\nDan file `database.rules.json` seperti berikut yang artinya saya membiarkan pengguna mengakses database saya tanpa perlu login terlebih dahulu.\n\n```javascript\n{\n  "rules": {\n    ".read": "auth == null",\n    ".write": "auth == null"\n  }\n}\n```\n\n## Menyiapkan Struktur Data\n\nStruktur data dari Firebase DB ini tidak seperti basis data relasional, Firebase DB lebih seperti file JSON file biasa.\n\nSaya membuat struktur data untuk menyimpan jumlah like pada setiap artikel seperti berikut:\n\n```javascript\n{\n  "claps": {\n    "create-simple-like-button-using-firebase-rtdb":0,"eslint-formatter-html-extended":0,\n    "blog-2-0-in-nuxtjs":0\n  }\n}\n```\n\nJika kalian malas, kalian juga bisa melakukan import dari data JSON yang sudah saya siapkan di file `firebase-db-export.json` pada projek Blog 2.0.\n\nJangan lupa untuk membuka akses untuk *read* dan *write* pada tab `Rules`:\n\n```javascript\n{\n  "rules": {\n    ".read": true,\n    ".write": true\n  }\n}\n```\n\n## Membaca dan Memperbarui Data\n\nFirebase terbilang cukup mudah untuk digunakan dengan Vue ataupun Nuxt, kita akan mencoba membaca data yang telah kita buat di Firebase DB di dalam Vue Component kita.\n\nSaya meletakan di *life cycle* `mounted` di Vue Component kode berikut:\n\n```javascript\n// this is vue component instance\nconst __self = this\nconst REF_URL = \'claps/\' + __self.meta.slug\n__self.clapsRefs = __self.$firebase.database().ref(REF_URL)\n__self.clapsRefs.once(\'value\').then(function (snapshot) {\n  __self.claps = snapshot.val()\n})\n```\n\nSebelumnya tentu saya harus menyiapkan state `clapsRefs` dan `claps` di bagian `data ()` sebagai penampung nilai tersebut.\n\nKode diatas digunakan untuk menginisialisai nilai berdasarkan data yang ada di Firebase DB, bagaimana kalau ada perubahan nilai pada Firebase DB kita? karena kita menggunakan Firebase Realtime-DB maka akan sangat mudah bagi kita untuk mendengarkan setiap perubahan yang terjadi dan saar itu pula langsung bereaksi dengan memperbarui tampilan jumlah *like* yang ditampilkan. Kode untuk mendengarkan perubahan secara realtime kurang lebih sebagai berikut:\n\n```javascript\n// this is vue component instance\nconst __self = this\n__self.clapsRefs.on(\'value\', function (snapshot) {\n  __self.claps = snapshot.val()\n})\n```\n\nSementara untuk memperbarui nilai di DB kita juga tidak kalah mudahnya, cukup dengan kode `set` pada referensi yang telah kita dapatkan, seperti contoh berikut:\n\n```javascript\n// this is vue component instance\nif (this.clapsRefs) {\n  this.clapsRefs.set(this.claps + 1)\n}\n```\n\n## Travis CI Konfigurasi\n\nSentuhan terkhir adalah memastikan ketika proses build kita menyetel nilai *environment variable* dengan nilai asli sesuai dengan apa yang kita gunakan di prodcution. Bila pada saat di lokal kita bisa menggunakan file `.env` yang tidak mungkin kita push ke repository.\n\nDi [Travis CI ↗️](https://travis-ci.org) kita juga bisa menyetel berbagai variabel dengan mudah. Cukup masuk ke bagian `settings` dan kita bisa menambahkan *key-value* sebagai variabel yang akan diikutkan saat proses *build*.\n\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/create-simple-like-button-using-firebase-rtdb/travis-ci-env.png" alt="Travis CI Environment Variable" height="200px" width="200px">\n\n### Demikian artikel kali ini, semoga bermanfaat...\n\n',html:'<h2>Latar Belakang</h2>\n<p>Seperti sudah saya jelaskan pada tulisan sebelumnya bahwa Blog 2.0 ini hanyalah sebuah static Blog tanpa Backend, pun saya hanya menggunakan jasa static hosting dari Netlify untuk meletakan dan meyajikan file hasil build. Karena saya tidak menggunakan Backend dan tidak ingin menggunakannya, maka saya kesulitan ketika ingin menambahkan fitur yang mengharuskan saya menyimpan data di basis data (<em>database</em> -DB) seperti jumlah orang yang <em>like</em> suatu artikel. Data seperti itu jelas bukan data yang bisa disimpan di <em>browser</em> masing-masing. Datanya harus terpusat dan semua pengunjung melihat jumlah yang sama. Data seperti ini paling ideal ada di DB, apapun jenis DB yang digunakan.</p>\n<p>Dewasa ini untunglah ada platform seperti <a href="https://firebase.google.com/">Firebase ↗️</a> yang membantu orang-orang yang males bikin Backend namun tetap bisa menyimpan data secara terpusat. Firebase bukan cuma menyediakan DB untuk kita tapi juga jasa lainnya seperti hosting, otentikasi, cloud storage, analytics, A/B testing, remote config, dynamic link dan berbagai hal keren lainnya. Firebase ini ibarat paket komplit kalau kita mau beli makan siang.</p>\n<p>Kali ini kita hanya akan menggunakan fitur real-time databasenya saja.</p>\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/create-simple-like-button-using-firebase-rtdb/button-like-firebase.png" alt="Button Like Firebase" height="200px" width="200px">\n<h2>Membuat Projek di Firebase</h2>\n<p>Pertama kalian harus membuat projek di <a href="https://console.firebase.google.com/">Firebase Console ↗️</a>, kalian bisa memberi nama apapun pada projek kalian tapi nama ini memang harus unik dan belum pernah digunakan oleh orang lain.</p>\n<p>Berikutnya kalian akan disuguhi pilihan untuk melakukan setup pada Firebase yang berbeda-beda tergantung jenis projek kalian, kita bisa memilih untuk web dan akan diberikan kode untuk memasang Firebase seperti berikut:</p>\n<pre><code class="language-html">&lt;script src=&quot;https://www.gstatic.com/firebasejs/5.8.3/firebase.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  // Initialize Firebase\n  var config = {\n    apiKey: &quot;QWERTY-YTREWQ&quot;,\n    authDomain: &quot;contoh-aja.firebaseapp.com&quot;,\n    databaseURL: &quot;https://contoh-aja.firebaseio.com&quot;,\n    projectId: &quot;contoh-aja&quot;,\n    storageBucket: &quot;contoh-aja.appspot.com&quot;,\n    messagingSenderId: &quot;1234567890&quot;\n  };\n  firebase.initializeApp(config);\n&lt;/script&gt;\n</code></pre>\n<p>Kita tidak bisa <em>copy-paste</em> kode ini mentah-mentah, karena projek Blog 2.0 menggunakan Nuxt sebagai framework dan tentu berbeda sedikit cara menggunakannya.</p>\n<p>Sebelum mulai menyiapkan konfigurasi, saya memilih untuk meletakan nilai-nilai konfigurasi ini kedalam file <code>.env</code> agar mudah diubah-ubah nantinya.</p>\n<p>Saya membuat file <code>.env</code> dengan isi berdasarkan konfigurasi yang didapat dari Firebase seperti berikut:</p>\n<pre><code class="language-bash">FIREBASE_API_KEY= your firebase `apiKey` config\nFIREBASE_AUTH_DOMAIN= your firebase `authDomain` config\nFIREBASE_DATABASE_URL= your firebase `databaseURL` config\nFIREBASE_PROJECT_ID= your firebase `projectId` config\nFIREBASE_STORAGE_BUCKET= your firebase `storageBucket` config\nFIREBASE_MESSAGING_SENDER_ID= your firebase `messagingSenderId` config\n</code></pre>\n<p>Di Nuxt.js saya menambahkan module <code>@nuxtjs/dotenv</code> di file <code>nuxt.config.js</code> agar bisa membaca nilai dari <code>.env</code> ini, namun belakangan saya mendapati kalau nilai ini tidak diganti ketika proses generate file static dilakukan oleh Nuxt. Saya perlu menambahkan kode berikut pada file <code>nuxt.config.js</code> saya:</p>\n<pre><code class="language-javascript">module.exports = {\n  env: {\n    FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,\n    FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,\n    FIREBASE_DATABASE_URL: process.env.FIREBASE_DATABASE_URL,\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,\n    FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID\n  },\n}\n</code></pre>\n<h2>Menyiapkan Kode Konfigurasi</h2>\n<p>Untuk membuka koneksi ke Firebase, saya membutuhkan dependency <code>firebase</code> yang bisa dipasang lewat perintah</p>\n<pre><code class="language-bash">$ yarn add firebase\n# atau\n$ npm i firebase\n</code></pre>\n<p>Saya memilih untuk meletakan koneksi firebase ini ke dalam folder <code>plugins</code> di struktur Nuxt, ini artinya akan ditambahkan di semua halaman yang ada di dalam projek ini.</p>\n<p>Saya membuat file <code>plugins/firebase.js</code> dan membuat koneksi ke Firebase dengan kode berikut:</p>\n<pre><code class="language-javascript">import Vue from \'vue\'\nconst firebase = require(\'firebase/app\')\nrequire(\'firebase/database\')\n\nvar config = {\n  apiKey: process.env.FIREBASE_API_KEY || \'\',\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN || \'\',\n  databaseURL: process.env.FIREBASE_DATABASE_URL || \'\',\n  projectId: process.env.FIREBASE_PROJECT_ID || \'\',\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET || \'\',\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || \'\'\n}\n\nfirebase.initializeApp(config)\nVue.prototype.$firebase = firebase\n</code></pre>\n<p>Selain membuka koneksi ke Firebase saya juga melakukan injeksi objek firebase yang telah disiapkan kedalam <em>instance</em> dari Vue agar mudah dipakai di Vue Component nantinya.</p>\n<p>Saya perlu menambahkan plugins ini di file <code>nuxt.config.js</code> agar terbaca di projek ini dengan kode seperti berikut:</p>\n<pre><code class="language-javascript">module.exports = {\n  plugins: [\n    { src: \'~/plugins/firebase\', ssr: false }\n   ↗️]\n}\n</code></pre>\n<p>Selain harus diinisialisasi, Firebase juga membutuhkan beberapa file seperti <code>firebase.json</code>, <code>.firebaserc</code> dan <code>database.rules.json</code>. File-file ini bisa didapatkan dengan perintah <code>firebase init</code> pada folder root projek kita. Namun sebelum itu kalian harus login ke dalam firebase terlebih dahulu dengan perintah <code>firebase login</code>.</p>\n<p>Berikut contoh file <code>firebase.json</code> yang bisa kalian temui juga di projek ini:</p>\n<pre><code class="language-javascript">{\n  &quot;database&quot;: {\n    &quot;rules&quot;: &quot;database.rules.json&quot;\n  }\n}\n</code></pre>\n<p>Dan file <code>database.rules.json</code> seperti berikut yang artinya saya membiarkan pengguna mengakses database saya tanpa perlu login terlebih dahulu.</p>\n<pre><code class="language-javascript">{\n  &quot;rules&quot;: {\n    &quot;.read&quot;: &quot;auth == null&quot;,\n    &quot;.write&quot;: &quot;auth == null&quot;\n  }\n}\n</code></pre>\n<h2>Menyiapkan Struktur Data</h2>\n<p>Struktur data dari Firebase DB ini tidak seperti basis data relasional, Firebase DB lebih seperti file JSON file biasa.</p>\n<p>Saya membuat struktur data untuk menyimpan jumlah like pada setiap artikel seperti berikut:</p>\n<pre><code class="language-javascript">{\n  &quot;claps&quot;: {\n    &quot;create-simple-like-button-using-firebase-rtdb&quot;:0,&quot;eslint-formatter-html-extended&quot;:0,\n    &quot;blog-2-0-in-nuxtjs&quot;:0\n  }\n}\n</code></pre>\n<p>Jika kalian malas, kalian juga bisa melakukan import dari data JSON yang sudah saya siapkan di file <code>firebase-db-export.json</code> pada projek Blog 2.0.</p>\n<p>Jangan lupa untuk membuka akses untuk <em>read</em> dan <em>write</em> pada tab <code>Rules</code>:</p>\n<pre><code class="language-javascript">{\n  &quot;rules&quot;: {\n    &quot;.read&quot;: true,\n    &quot;.write&quot;: true\n  }\n}\n</code></pre>\n<h2>Membaca dan Memperbarui Data</h2>\n<p>Firebase terbilang cukup mudah untuk digunakan dengan Vue ataupun Nuxt, kita akan mencoba membaca data yang telah kita buat di Firebase DB di dalam Vue Component kita.</p>\n<p>Saya meletakan di <em>life cycle</em> <code>mounted</code> di Vue Component kode berikut:</p>\n<pre><code class="language-javascript">// this is vue component instance\nconst __self = this\nconst REF_URL = \'claps/\' + __self.meta.slug\n__self.clapsRefs = __self.$firebase.database().ref(REF_URL)\n__self.clapsRefs.once(\'value\').then(function (snapshot) {\n  __self.claps = snapshot.val()\n})\n</code></pre>\n<p>Sebelumnya tentu saya harus menyiapkan state <code>clapsRefs</code> dan <code>claps</code> di bagian <code>data ()</code> sebagai penampung nilai tersebut.</p>\n<p>Kode diatas digunakan untuk menginisialisai nilai berdasarkan data yang ada di Firebase DB, bagaimana kalau ada perubahan nilai pada Firebase DB kita? karena kita menggunakan Firebase Realtime-DB maka akan sangat mudah bagi kita untuk mendengarkan setiap perubahan yang terjadi dan saar itu pula langsung bereaksi dengan memperbarui tampilan jumlah <em>like</em> yang ditampilkan. Kode untuk mendengarkan perubahan secara realtime kurang lebih sebagai berikut:</p>\n<pre><code class="language-javascript">// this is vue component instance\nconst __self = this\n__self.clapsRefs.on(\'value\', function (snapshot) {\n  __self.claps = snapshot.val()\n})\n</code></pre>\n<p>Sementara untuk memperbarui nilai di DB kita juga tidak kalah mudahnya, cukup dengan kode <code>set</code> pada referensi yang telah kita dapatkan, seperti contoh berikut:</p>\n<pre><code class="language-javascript">// this is vue component instance\nif (this.clapsRefs) {\n  this.clapsRefs.set(this.claps + 1)\n}\n</code></pre>\n<h2>Travis CI Konfigurasi</h2>\n<p>Sentuhan terkhir adalah memastikan ketika proses build kita menyetel nilai <em>environment variable</em> dengan nilai asli sesuai dengan apa yang kita gunakan di prodcution. Bila pada saat di lokal kita bisa menggunakan file <code>.env</code> yang tidak mungkin kita push ke repository.</p>\n<p>Di <a href="https://travis-ci.org">Travis CI ↗️</a> kita juga bisa menyetel berbagai variabel dengan mudah. Cukup masuk ke bagian <code>settings</code> dan kita bisa menambahkan <em>key-value</em> sebagai variabel yang akan diikutkan saat proses <em>build</em>.</p>\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/create-simple-like-button-using-firebase-rtdb/travis-ci-env.png" alt="Travis CI Environment Variable" height="200px" width="200px">\n<h3>Demikian artikel kali ini, semoga bermanfaat...</h3>\n',attributes:{title:"Membuat button Like sederhana menggunakan Firebase Realtime Database",slug:"create-simple-like-button-using-firebase-rtdb",date:"2019-02-21",minute2read:10,description:"Berbagi pengalaman dalam menggunakan Firebase RTDB untuk membuat button Like sederhana seperti yang terlihat pada Blog 2.0 ini",categories:["javascript","nuxt","firebase"],cover:"https://www.mazipan.xyz/content-images/create-simple-like-button-using-firebase-rtdb/button-like-firebase.png",_meta:{resourcePath:"/home/travis/build/mazipan/blog-2.0/contents/published/create-simple-like-button-using-firebase-rtdb/index.md"}},vue:{render:'return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"content-markdown"},[_c(\'h2\',[_vm._v("Latar Belakang")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_vm._m(1),_vm._v(" "),_c(\'p\',[_vm._v("Kali ini kita hanya akan menggunakan fitur real-time databasenya saja.")]),_vm._v(" "),_c(\'img\',{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{"src":"/images/placeholder-1x1.png","data-src":"/content-images/create-simple-like-button-using-firebase-rtdb/button-like-firebase.png","alt":"Button Like Firebase","height":"200px","width":"200px"}}),_vm._v(" "),_c(\'h2\',[_vm._v("Membuat Projek di Firebase")]),_vm._v(" "),_vm._m(2),_vm._v(" "),_c(\'p\',[_vm._v("Berikutnya kalian akan disuguhi pilihan untuk melakukan setup pada Firebase yang berbeda-beda tergantung jenis projek kalian, kita bisa memilih untuk web dan akan diberikan kode untuk memasang Firebase seperti berikut:")]),_vm._v(" "),_vm._m(3),_vm._v(" "),_vm._m(4),_vm._v(" "),_vm._m(5),_vm._v(" "),_vm._m(6),_vm._v(" "),_vm._m(7),_vm._v(" "),_vm._m(8),_vm._v(" "),_vm._m(9),_vm._v(" "),_c(\'h2\',[_vm._v("Menyiapkan Kode Konfigurasi")]),_vm._v(" "),_vm._m(10),_vm._v(" "),_vm._m(11),_vm._v(" "),_vm._m(12),_vm._v(" "),_vm._m(13),_vm._v(" "),_vm._m(14),_vm._v(" "),_vm._m(15),_vm._v(" "),_vm._m(16),_vm._v(" "),_vm._m(17),_vm._v(" "),_vm._m(18),_vm._v(" "),_vm._m(19),_vm._v(" "),_vm._m(20),_vm._v(" "),_vm._m(21),_vm._v(" "),_vm._m(22),_vm._v(" "),_c(\'h2\',[_vm._v("Menyiapkan Struktur Data")]),_vm._v(" "),_c(\'p\',[_vm._v("Struktur data dari Firebase DB ini tidak seperti basis data relasional, Firebase DB lebih seperti file JSON file biasa.")]),_vm._v(" "),_c(\'p\',[_vm._v("Saya membuat struktur data untuk menyimpan jumlah like pada setiap artikel seperti berikut:")]),_vm._v(" "),_vm._m(23),_vm._v(" "),_vm._m(24),_vm._v(" "),_vm._m(25),_vm._v(" "),_vm._m(26),_vm._v(" "),_c(\'h2\',[_vm._v("Membaca dan Memperbarui Data")]),_vm._v(" "),_c(\'p\',[_vm._v("Firebase terbilang cukup mudah untuk digunakan dengan Vue ataupun Nuxt, kita akan mencoba membaca data yang telah kita buat di Firebase DB di dalam Vue Component kita.")]),_vm._v(" "),_vm._m(27),_vm._v(" "),_vm._m(28),_vm._v(" "),_vm._m(29),_vm._v(" "),_vm._m(30),_vm._v(" "),_vm._m(31),_vm._v(" "),_vm._m(32),_vm._v(" "),_vm._m(33),_vm._v(" "),_c(\'h2\',[_vm._v("Travis CI Konfigurasi")]),_vm._v(" "),_vm._m(34),_vm._v(" "),_vm._m(35),_vm._v(" "),_c(\'img\',{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{"src":"/images/placeholder-1x1.png","data-src":"/content-images/create-simple-like-button-using-firebase-rtdb/travis-ci-env.png","alt":"Travis CI Environment Variable","height":"200px","width":"200px"}}),_vm._v(" "),_c(\'h3\',[_vm._v("Demikian artikel kali ini, semoga bermanfaat...")])]) }',staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Seperti sudah saya jelaskan pada tulisan sebelumnya bahwa Blog 2.0 ini hanyalah sebuah static Blog tanpa Backend, pun saya hanya menggunakan jasa static hosting dari Netlify untuk meletakan dan meyajikan file hasil build. Karena saya tidak menggunakan Backend dan tidak ingin menggunakannya, maka saya kesulitan ketika ingin menambahkan fitur yang mengharuskan saya menyimpan data di basis data ("),_c(\'em\',[_vm._v("database")]),_vm._v(" -DB) seperti jumlah orang yang "),_c(\'em\',[_vm._v("like")]),_vm._v(" suatu artikel. Data seperti itu jelas bukan data yang bisa disimpan di "),_c(\'em\',[_vm._v("browser")]),_vm._v(" masing-masing. Datanya harus terpusat dan semua pengunjung melihat jumlah yang sama. Data seperti ini paling ideal ada di DB, apapun jenis DB yang digunakan.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Dewasa ini untunglah ada platform seperti "),_c(\'a\',{attrs:{"href":"https://firebase.google.com/"}},[_vm._v("Firebase ↗️")]),_vm._v(" yang membantu orang-orang yang males bikin Backend namun tetap bisa menyimpan data secara terpusat. Firebase bukan cuma menyediakan DB untuk kita tapi juga jasa lainnya seperti hosting, otentikasi, cloud storage, analytics, A/B testing, remote config, dynamic link dan berbagai hal keren lainnya. Firebase ini ibarat paket komplit kalau kita mau beli makan siang.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Pertama kalian harus membuat projek di "),_c(\'a\',{attrs:{"href":"https://console.firebase.google.com/"}},[_vm._v("Firebase Console ↗️")]),_vm._v(", kalian bisa memberi nama apapun pada projek kalian tapi nama ini memang harus unik dan belum pernah digunakan oleh orang lain.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<script src=\\"https://www.gstatic.com/firebasejs/5.8.3/firebase.js\\"><\/script>\\n<script>\\n  // Initialize Firebase\\n  var config = {\\n    apiKey: \\"QWERTY-YTREWQ\\",\\n    authDomain: \\"contoh-aja.firebaseapp.com\\",\\n    databaseURL: \\"https://contoh-aja.firebaseio.com\\",\\n    projectId: \\"contoh-aja\\",\\n    storageBucket: \\"contoh-aja.appspot.com\\",\\n    messagingSenderId: \\"1234567890\\"\\n  };\\n  firebase.initializeApp(config);\\n<\/script>\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Kita tidak bisa "),_c(\'em\',[_vm._v("copy-paste")]),_vm._v(" kode ini mentah-mentah, karena projek Blog 2.0 menggunakan Nuxt sebagai framework dan tentu berbeda sedikit cara menggunakannya.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Sebelum mulai menyiapkan konfigurasi, saya memilih untuk meletakan nilai-nilai konfigurasi ini kedalam file "),_c(\'code\',{pre:true},[_vm._v(".env")]),_vm._v(" agar mudah diubah-ubah nantinya.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya membuat file "),_c(\'code\',{pre:true},[_vm._v(".env")]),_vm._v(" dengan isi berdasarkan konfigurasi yang didapat dari Firebase seperti berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("FIREBASE_API_KEY= your firebase `apiKey` config\\nFIREBASE_AUTH_DOMAIN= your firebase `authDomain` config\\nFIREBASE_DATABASE_URL= your firebase `databaseURL` config\\nFIREBASE_PROJECT_ID= your firebase `projectId` config\\nFIREBASE_STORAGE_BUCKET= your firebase `storageBucket` config\\nFIREBASE_MESSAGING_SENDER_ID= your firebase `messagingSenderId` config\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Di Nuxt.js saya menambahkan module "),_c(\'code\',{pre:true},[_vm._v("@nuxtjs/dotenv")]),_vm._v(" di file "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(" agar bisa membaca nilai dari "),_c(\'code\',{pre:true},[_vm._v(".env")]),_vm._v(" ini, namun belakangan saya mendapati kalau nilai ini tidak diganti ketika proses generate file static dilakukan oleh Nuxt. Saya perlu menambahkan kode berikut pada file "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(" saya:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  env: {\\n    FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,\\n    FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,\\n    FIREBASE_DATABASE_URL: process.env.FIREBASE_DATABASE_URL,\\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\\n    FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,\\n    FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID\\n  },\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Untuk membuka koneksi ke Firebase, saya membutuhkan dependency "),_c(\'code\',{pre:true},[_vm._v("firebase")]),_vm._v(" yang bisa dipasang lewat perintah")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("$ yarn add firebase\\n# atau\\n$ npm i firebase\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya memilih untuk meletakan koneksi firebase ini ke dalam folder "),_c(\'code\',{pre:true},[_vm._v("plugins")]),_vm._v(" di struktur Nuxt, ini artinya akan ditambahkan di semua halaman yang ada di dalam projek ini.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya membuat file "),_c(\'code\',{pre:true},[_vm._v("plugins/firebase.js")]),_vm._v(" dan membuat koneksi ke Firebase dengan kode berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import Vue from \'vue\'\\nconst firebase = require(\'firebase/app\')\\nrequire(\'firebase/database\')\\n\\nvar config = {\\n  apiKey: process.env.FIREBASE_API_KEY || \'\',\\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN || \'\',\\n  databaseURL: process.env.FIREBASE_DATABASE_URL || \'\',\\n  projectId: process.env.FIREBASE_PROJECT_ID || \'\',\\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET || \'\',\\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || \'\'\\n}\\n\\nfirebase.initializeApp(config)\\nVue.prototype.$firebase = firebase\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Selain membuka koneksi ke Firebase saya juga melakukan injeksi objek firebase yang telah disiapkan kedalam "),_c(\'em\',[_vm._v("instance")]),_vm._v(" dari Vue agar mudah dipakai di Vue Component nantinya.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya perlu menambahkan plugins ini di file "),_c(\'code\',{pre:true},[_vm._v("nuxt.config.js")]),_vm._v(" agar terbaca di projek ini dengan kode seperti berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  plugins: [\\n    { src: \'~/plugins/firebase\', ssr: false }\\n   ↗️]\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Selain harus diinisialisasi, Firebase juga membutuhkan beberapa file seperti "),_c(\'code\',{pre:true},[_vm._v("firebase.json")]),_vm._v(", "),_c(\'code\',{pre:true},[_vm._v(".firebaserc")]),_vm._v(" dan "),_c(\'code\',{pre:true},[_vm._v("database.rules.json")]),_vm._v(". File-file ini bisa didapatkan dengan perintah "),_c(\'code\',{pre:true},[_vm._v("firebase init")]),_vm._v(" pada folder root projek kita. Namun sebelum itu kalian harus login ke dalam firebase terlebih dahulu dengan perintah "),_c(\'code\',{pre:true},[_vm._v("firebase login")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Berikut contoh file "),_c(\'code\',{pre:true},[_vm._v("firebase.json")]),_vm._v(" yang bisa kalian temui juga di projek ini:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"database\\": {\\n    \\"rules\\": \\"database.rules.json\\"\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Dan file "),_c(\'code\',{pre:true},[_vm._v("database.rules.json")]),_vm._v(" seperti berikut yang artinya saya membiarkan pengguna mengakses database saya tanpa perlu login terlebih dahulu.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"rules\\": {\\n    \\".read\\": \\"auth == null\\",\\n    \\".write\\": \\"auth == null\\"\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"claps\\": {\\n    \\"create-simple-like-button-using-firebase-rtdb\\":0,\\"eslint-formatter-html-extended\\":0,\\n    \\"blog-2-0-in-nuxtjs\\":0\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Jika kalian malas, kalian juga bisa melakukan import dari data JSON yang sudah saya siapkan di file "),_c(\'code\',{pre:true},[_vm._v("firebase-db-export.json")]),_vm._v(" pada projek Blog 2.0.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Jangan lupa untuk membuka akses untuk "),_c(\'em\',[_vm._v("read")]),_vm._v(" dan "),_c(\'em\',[_vm._v("write")]),_vm._v(" pada tab "),_c(\'code\',{pre:true},[_vm._v("Rules")]),_vm._v(":")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"rules\\": {\\n    \\".read\\": true,\\n    \\".write\\": true\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya meletakan di "),_c(\'em\',[_vm._v("life cycle")]),_vm._v(" "),_c(\'code\',{pre:true},[_vm._v("mounted")]),_vm._v(" di Vue Component kode berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("// this is vue component instance\\nconst __self = this\\nconst REF_URL = \'claps/\' + __self.meta.slug\\n__self.clapsRefs = __self.$firebase.database().ref(REF_URL)\\n__self.clapsRefs.once(\'value\').then(function (snapshot) {\\n  __self.claps = snapshot.val()\\n})\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Sebelumnya tentu saya harus menyiapkan state "),_c(\'code\',{pre:true},[_vm._v("clapsRefs")]),_vm._v(" dan "),_c(\'code\',{pre:true},[_vm._v("claps")]),_vm._v(" di bagian "),_c(\'code\',{pre:true},[_vm._v("data ()")]),_vm._v(" sebagai penampung nilai tersebut.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Kode diatas digunakan untuk menginisialisai nilai berdasarkan data yang ada di Firebase DB, bagaimana kalau ada perubahan nilai pada Firebase DB kita? karena kita menggunakan Firebase Realtime-DB maka akan sangat mudah bagi kita untuk mendengarkan setiap perubahan yang terjadi dan saar itu pula langsung bereaksi dengan memperbarui tampilan jumlah "),_c(\'em\',[_vm._v("like")]),_vm._v(" yang ditampilkan. Kode untuk mendengarkan perubahan secara realtime kurang lebih sebagai berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("// this is vue component instance\\nconst __self = this\\n__self.clapsRefs.on(\'value\', function (snapshot) {\\n  __self.claps = snapshot.val()\\n})\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Sementara untuk memperbarui nilai di DB kita juga tidak kalah mudahnya, cukup dengan kode "),_c(\'code\',{pre:true},[_vm._v("set")]),_vm._v(" pada referensi yang telah kita dapatkan, seperti contoh berikut:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("// this is vue component instance\\nif (this.clapsRefs) {\\n  this.clapsRefs.set(this.claps + 1)\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Sentuhan terkhir adalah memastikan ketika proses build kita menyetel nilai "),_c(\'em\',[_vm._v("environment variable")]),_vm._v(" dengan nilai asli sesuai dengan apa yang kita gunakan di prodcution. Bila pada saat di lokal kita bisa menggunakan file "),_c(\'code\',{pre:true},[_vm._v(".env")]),_vm._v(" yang tidak mungkin kita push ke repository.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Di "),_c(\'a\',{attrs:{"href":"https://travis-ci.org"}},[_vm._v("Travis CI ↗️")]),_vm._v(" kita juga bisa menyetel berbagai variabel dengan mudah. Cukup masuk ke bagian "),_c(\'code\',{pre:true},[_vm._v("settings")]),_vm._v(" dan kita bisa menambahkan "),_c(\'em\',[_vm._v("key-value")]),_vm._v(" sebagai variabel yang akan diikutkan saat proses "),_c(\'em\',[_vm._v("build")]),_vm._v(".")]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content-markdown"},[t("h2",[e._v("Latar Belakang")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),t("p",[e._v("Kali ini kita hanya akan menggunakan fitur real-time databasenya saja.")]),e._v(" "),t("img",{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{src:"/images/placeholder-1x1.png","data-src":"/content-images/create-simple-like-button-using-firebase-rtdb/button-like-firebase.png",alt:"Button Like Firebase",height:"200px",width:"200px"}}),e._v(" "),t("h2",[e._v("Membuat Projek di Firebase")]),e._v(" "),e._m(2),e._v(" "),t("p",[e._v("Berikutnya kalian akan disuguhi pilihan untuk melakukan setup pada Firebase yang berbeda-beda tergantung jenis projek kalian, kita bisa memilih untuk web dan akan diberikan kode untuk memasang Firebase seperti berikut:")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),t("h2",[e._v("Menyiapkan Kode Konfigurasi")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),t("h2",[e._v("Menyiapkan Struktur Data")]),e._v(" "),t("p",[e._v("Struktur data dari Firebase DB ini tidak seperti basis data relasional, Firebase DB lebih seperti file JSON file biasa.")]),e._v(" "),t("p",[e._v("Saya membuat struktur data untuk menyimpan jumlah like pada setiap artikel seperti berikut:")]),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),t("h2",[e._v("Membaca dan Memperbarui Data")]),e._v(" "),t("p",[e._v("Firebase terbilang cukup mudah untuk digunakan dengan Vue ataupun Nuxt, kita akan mencoba membaca data yang telah kita buat di Firebase DB di dalam Vue Component kita.")]),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),t("h2",[e._v("Travis CI Konfigurasi")]),e._v(" "),e._m(34),e._v(" "),e._m(35),e._v(" "),t("img",{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{src:"/images/placeholder-1x1.png","data-src":"/content-images/create-simple-like-button-using-firebase-rtdb/travis-ci-env.png",alt:"Travis CI Environment Variable",height:"200px",width:"200px"}}),e._v(" "),t("h3",[e._v("Demikian artikel kali ini, semoga bermanfaat...")])])},this.$options.staticRenderFns=[function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Seperti sudah saya jelaskan pada tulisan sebelumnya bahwa Blog 2.0 ini hanyalah sebuah static Blog tanpa Backend, pun saya hanya menggunakan jasa static hosting dari Netlify untuk meletakan dan meyajikan file hasil build. Karena saya tidak menggunakan Backend dan tidak ingin menggunakannya, maka saya kesulitan ketika ingin menambahkan fitur yang mengharuskan saya menyimpan data di basis data ("),n("em",[this._v("database")]),this._v(" -DB) seperti jumlah orang yang "),n("em",[this._v("like")]),this._v(" suatu artikel. Data seperti itu jelas bukan data yang bisa disimpan di "),n("em",[this._v("browser")]),this._v(" masing-masing. Datanya harus terpusat dan semua pengunjung melihat jumlah yang sama. Data seperti ini paling ideal ada di DB, apapun jenis DB yang digunakan.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Dewasa ini untunglah ada platform seperti "),n("a",{attrs:{href:"https://firebase.google.com/"}},[this._v("Firebase ↗️")]),this._v(" yang membantu orang-orang yang males bikin Backend namun tetap bisa menyimpan data secara terpusat. Firebase bukan cuma menyediakan DB untuk kita tapi juga jasa lainnya seperti hosting, otentikasi, cloud storage, analytics, A/B testing, remote config, dynamic link dan berbagai hal keren lainnya. Firebase ini ibarat paket komplit kalau kita mau beli makan siang.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Pertama kalian harus membuat projek di "),n("a",{attrs:{href:"https://console.firebase.google.com/"}},[this._v("Firebase Console ↗️")]),this._v(", kalian bisa memberi nama apapun pada projek kalian tapi nama ini memang harus unik dan belum pernah digunakan oleh orang lain.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-html"}},[this._v('<script src="https://www.gstatic.com/firebasejs/5.8.3/firebase.js"><\/script>\n<script>\n  // Initialize Firebase\n  var config = {\n    apiKey: "QWERTY-YTREWQ",\n    authDomain: "contoh-aja.firebaseapp.com",\n    databaseURL: "https://contoh-aja.firebaseio.com",\n    projectId: "contoh-aja",\n    storageBucket: "contoh-aja.appspot.com",\n    messagingSenderId: "1234567890"\n  };\n  firebase.initializeApp(config);\n<\/script>\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Kita tidak bisa "),n("em",[this._v("copy-paste")]),this._v(" kode ini mentah-mentah, karena projek Blog 2.0 menggunakan Nuxt sebagai framework dan tentu berbeda sedikit cara menggunakannya.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Sebelum mulai menyiapkan konfigurasi, saya memilih untuk meletakan nilai-nilai konfigurasi ini kedalam file "),n("code",{pre:!0},[this._v(".env")]),this._v(" agar mudah diubah-ubah nantinya.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Saya membuat file "),n("code",{pre:!0},[this._v(".env")]),this._v(" dengan isi berdasarkan konfigurasi yang didapat dari Firebase seperti berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-bash"}},[this._v("FIREBASE_API_KEY= your firebase `apiKey` config\nFIREBASE_AUTH_DOMAIN= your firebase `authDomain` config\nFIREBASE_DATABASE_URL= your firebase `databaseURL` config\nFIREBASE_PROJECT_ID= your firebase `projectId` config\nFIREBASE_STORAGE_BUCKET= your firebase `storageBucket` config\nFIREBASE_MESSAGING_SENDER_ID= your firebase `messagingSenderId` config\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Di Nuxt.js saya menambahkan module "),t("code",{pre:!0},[e._v("@nuxtjs/dotenv")]),e._v(" di file "),t("code",{pre:!0},[e._v("nuxt.config.js")]),e._v(" agar bisa membaca nilai dari "),t("code",{pre:!0},[e._v(".env")]),e._v(" ini, namun belakangan saya mendapati kalau nilai ini tidak diganti ketika proses generate file static dilakukan oleh Nuxt. Saya perlu menambahkan kode berikut pada file "),t("code",{pre:!0},[e._v("nuxt.config.js")]),e._v(" saya:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("module.exports = {\n  env: {\n    FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,\n    FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,\n    FIREBASE_DATABASE_URL: process.env.FIREBASE_DATABASE_URL,\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,\n    FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID\n  },\n}\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Untuk membuka koneksi ke Firebase, saya membutuhkan dependency "),n("code",{pre:!0},[this._v("firebase")]),this._v(" yang bisa dipasang lewat perintah")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-bash"}},[this._v("$ yarn add firebase\n# atau\n$ npm i firebase\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Saya memilih untuk meletakan koneksi firebase ini ke dalam folder "),n("code",{pre:!0},[this._v("plugins")]),this._v(" di struktur Nuxt, ini artinya akan ditambahkan di semua halaman yang ada di dalam projek ini.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Saya membuat file "),n("code",{pre:!0},[this._v("plugins/firebase.js")]),this._v(" dan membuat koneksi ke Firebase dengan kode berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import Vue from 'vue'\nconst firebase = require('firebase/app')\nrequire('firebase/database')\n\nvar config = {\n  apiKey: process.env.FIREBASE_API_KEY || '',\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN || '',\n  databaseURL: process.env.FIREBASE_DATABASE_URL || '',\n  projectId: process.env.FIREBASE_PROJECT_ID || '',\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET || '',\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || ''\n}\n\nfirebase.initializeApp(config)\nVue.prototype.$firebase = firebase\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Selain membuka koneksi ke Firebase saya juga melakukan injeksi objek firebase yang telah disiapkan kedalam "),n("em",[this._v("instance")]),this._v(" dari Vue agar mudah dipakai di Vue Component nantinya.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Saya perlu menambahkan plugins ini di file "),n("code",{pre:!0},[this._v("nuxt.config.js")]),this._v(" agar terbaca di projek ini dengan kode seperti berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("module.exports = {\n  plugins: [\n    { src: '~/plugins/firebase', ssr: false }\n   ↗️]\n}\n")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Selain harus diinisialisasi, Firebase juga membutuhkan beberapa file seperti "),t("code",{pre:!0},[e._v("firebase.json")]),e._v(", "),t("code",{pre:!0},[e._v(".firebaserc")]),e._v(" dan "),t("code",{pre:!0},[e._v("database.rules.json")]),e._v(". File-file ini bisa didapatkan dengan perintah "),t("code",{pre:!0},[e._v("firebase init")]),e._v(" pada folder root projek kita. Namun sebelum itu kalian harus login ke dalam firebase terlebih dahulu dengan perintah "),t("code",{pre:!0},[e._v("firebase login")]),e._v(".")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Berikut contoh file "),n("code",{pre:!0},[this._v("firebase.json")]),this._v(" yang bisa kalian temui juga di projek ini:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "database": {\n    "rules": "database.rules.json"\n  }\n}\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Dan file "),n("code",{pre:!0},[this._v("database.rules.json")]),this._v(" seperti berikut yang artinya saya membiarkan pengguna mengakses database saya tanpa perlu login terlebih dahulu.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "rules": {\n    ".read": "auth == null",\n    ".write": "auth == null"\n  }\n}\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "claps": {\n    "create-simple-like-button-using-firebase-rtdb":0,"eslint-formatter-html-extended":0,\n    "blog-2-0-in-nuxtjs":0\n  }\n}\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Jika kalian malas, kalian juga bisa melakukan import dari data JSON yang sudah saya siapkan di file "),n("code",{pre:!0},[this._v("firebase-db-export.json")]),this._v(" pada projek Blog 2.0.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Jangan lupa untuk membuka akses untuk "),n("em",[this._v("read")]),this._v(" dan "),n("em",[this._v("write")]),this._v(" pada tab "),n("code",{pre:!0},[this._v("Rules")]),this._v(":")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "rules": {\n    ".read": true,\n    ".write": true\n  }\n}\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Saya meletakan di "),n("em",[this._v("life cycle")]),this._v(" "),n("code",{pre:!0},[this._v("mounted")]),this._v(" di Vue Component kode berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("// this is vue component instance\nconst __self = this\nconst REF_URL = 'claps/' + __self.meta.slug\n__self.clapsRefs = __self.$firebase.database().ref(REF_URL)\n__self.clapsRefs.once('value').then(function (snapshot) {\n  __self.claps = snapshot.val()\n})\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Sebelumnya tentu saya harus menyiapkan state "),n("code",{pre:!0},[this._v("clapsRefs")]),this._v(" dan "),n("code",{pre:!0},[this._v("claps")]),this._v(" di bagian "),n("code",{pre:!0},[this._v("data ()")]),this._v(" sebagai penampung nilai tersebut.")])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Kode diatas digunakan untuk menginisialisai nilai berdasarkan data yang ada di Firebase DB, bagaimana kalau ada perubahan nilai pada Firebase DB kita? karena kita menggunakan Firebase Realtime-DB maka akan sangat mudah bagi kita untuk mendengarkan setiap perubahan yang terjadi dan saar itu pula langsung bereaksi dengan memperbarui tampilan jumlah "),n("em",[this._v("like")]),this._v(" yang ditampilkan. Kode untuk mendengarkan perubahan secara realtime kurang lebih sebagai berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("// this is vue component instance\nconst __self = this\n__self.clapsRefs.on('value', function (snapshot) {\n  __self.claps = snapshot.val()\n})\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Sementara untuk memperbarui nilai di DB kita juga tidak kalah mudahnya, cukup dengan kode "),n("code",{pre:!0},[this._v("set")]),this._v(" pada referensi yang telah kita dapatkan, seperti contoh berikut:")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("// this is vue component instance\nif (this.clapsRefs) {\n  this.clapsRefs.set(this.claps + 1)\n}\n")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("p",[this._v("Sentuhan terkhir adalah memastikan ketika proses build kita menyetel nilai "),n("em",[this._v("environment variable")]),this._v(" dengan nilai asli sesuai dengan apa yang kita gunakan di prodcution. Bila pada saat di lokal kita bisa menggunakan file "),n("code",{pre:!0},[this._v(".env")]),this._v(" yang tidak mungkin kita push ke repository.")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("Di "),t("a",{attrs:{href:"https://travis-ci.org"}},[e._v("Travis CI ↗️")]),e._v(" kita juga bisa menyetel berbagai variabel dengan mudah. Cukup masuk ke bagian "),t("code",{pre:!0},[e._v("settings")]),e._v(" dan kita bisa menambahkan "),t("em",[e._v("key-value")]),e._v(" sebagai variabel yang akan diikutkan saat proses "),t("em",[e._v("build")]),e._v(".")])}]}}}}}}]);