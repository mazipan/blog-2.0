(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{186:function(n,e){n.exports={body:'## ReasonML, makanan apa ya?\n\nReasonML (baca: Alasan Bercinta), bila saya kutip dari kata-kata mas Riza di blognya yang dipublikasikan [disini  ↗️](https://rizafahmi.com/2018/12/10/perkenalan-reasonml/) adalah sebuah sintaks yang berada diatas bahasa [OCaml  ↗️](https://ocaml.org/). ReasonML bisa menjadi bahasa yang *compiled-to-js* dengan bantuan [BuckleScript  ↗️](https://bucklescript.github.io/) sehingga menjadikan ReasonML pada akhirnya bisa langsung dibandingkan dengan TypeScript.\n\nLucunya, saya juga bahkan pertama kali dengar namanya bukan hasil dari baca dokumentasi resmi atau dengerin video kursus keren apapun tapi dari presentasi mas Riza Fahmi di [JakartaJS #45  ↗️](https://www.meetup.com/JakartaJS/events/256965042/) yang membahas State of JavaScript di 2018.\n\n## Alasan klise belajar ReasonML\n\nMasing-masing orang pasti punya alasan kenapa ingin belajar ini itu, atau alasan kenapa menggunakan ini dan itu. Mas Riza pun sudah menjelaskan beberapa alasan umum yang bisa kalian ambil sebagai pelecut untuk belajar ReasonML di tahun ini atau tahun depan (kalau masih ada 🤣).\n\nBagi saya pribadi sendiri, beberapa alasan klise kenapa kalian harus belajar ReasonML tahun ini antara lain:\n\n### Anti Maintstream\n\nIni bisa jadi alasan ampuh bagi kalian yang gampang jenuh dengan suatu teknologi, belajar hal-hal yang belum marak di pasaran bisa memberikan kepuasan berbeda pada prosesnya. Pun bilamana teknologi tersebut pada akhirnya memiliki perkembangan yang bagus kedepannya, maka kalian bisa bersyukur karena sudah mengambil langkah belajar lebih dini.\n\n### Facebook Centric Development\n\nSudah diketahui bersama bahwa dalam lingkungan developer sering terjadi perbedaan mazhab antara satu developer dengan developer lain, dimana biasanya pengambilan mazhab ini berpengaruh terhadap pemilihan teknologi pendukung di sekitarnya yang akan disesuaikan dengan mazhab yang mereka anut.\n\nFacebook menjadi salah satu kiblat yang akhir-akhir ini menunjukan gelagat yang sangat baik dalam mendukung lingkungan developer. Banyak sekali alat, framework, teknologi bahkan dokumentasi terkait berbagai teknologi keluaran facebook yang dibuka sebagai kode terbuka. Mengikuti mazhab Facebook tentu bukan hal yang salah, dimana paling tidak kita bisa bersembunyi dibalik nama besar dan konsistensi Facebook dalam memelihara berbagai proyek kode terbuka mereka.\n\nReasonML seperti diketahui juga dipelihara oleh tim Facebook yang bisa memberikan jaminan lebih terhadap perkembangan dan adopsi kedepannya.\n\n### Type Safe\n\nIya, sudah ada TypeScript. Tapi kan gak semua orang seneng pakai TypeScript. Pun bahwa tidak semua orang suka bila ada satu teknologi yang menjadi terlalu besar pada satu segmen. Untuk bahasa yang *Type Safe* di JavaScript memang saat ini TypeScript menjadi salah satu favorit banyak developer, tapi memberikan alternatif lain menjadi hal yang wajib agar masing-masing bisa terus berkembang dan saling berkompetisi.\n\nReasonML yang mengambil bahasa dasar dari OCaml diuntungkan dengan *Type System* yang sudah cukup mature dan teruji, ditambah kemampuan menebak *Type* dari suatu data tanpa perlu mendefinikan *Type* secara langsung (*Type Inference*) menjadikan kelebihan ReasonML dalam hal *Type System* semakin komplit.\n\n### Functional\n\nOCaml memang bahasa yang dasarnya menggunakan paradigma fungsional sehingga ReasonML pun mewarisi sifat ini. Bagi temen-temen yang ingin belajar bahasa dengan paradigma fungsional namun tidak terlalu *strict*, maka ReasonML salah satu pilihan terbaik buat temen-temen memulai.\n\n## Siapa yang sudah pakai ReasonML?\n\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/tasting-reasonml-for-react/reasonml-users.png" alt="ReasonML Users" height="200px" width="200px">\n\nBelum banyak pengguna ReasonML di dunia, tapi beberapa perusahaan besar sudah mulai mengadopsinya di production mereka. Di Indonesia sendiri sepertinya baru [Ruangguru ↗️](https://career.ruangguru.com/) yang berani terang-terangan menggunakan ReasonML di production.\n\n## Cara Saya Belajar\n\nSaya bukan orang yang senang belajar sintaksis karena jujur saja ini justru menjadi bagian yang paling membosankan dan gampang terlupakan oleh saya pribadi. Kalau kalian mampir ke [dokumentasi resminya ↗️](https://reasonml.github.io/docs/en/overview), kalian akan temui berbagai penjelasan lengkap dan contoh berbagai sintaksis dasar seperti penjelasan berbagai tipe data, tuple, record, variant dan sebagainya dengan mudah. Sayangnya membaca bagian ini tidak akan berpengaruh banyak bagi saya, semenit kemudian juga sudah lupa.\n\nBila temen-temen suka untuk belajar sintaksis terlebih dahulu, bisa langsung mampir ke [Playground ReasonML ↗️](https://reasonml.github.io/en/try?rrjsx=true&reason=C4TwDgpgBATlC8UDeAoKUD2A7CAuKAllsADRpTADuG+AzsDEQOZnrAAWMEehxrUAMwwBXGHQbN+AggDceRUuVoEAHuMZYWSiHKz4F-CASbtg6yeSxF5fcsAh6o9DVvQQANjof7bbSh7lzTX4OAhh7b15FdCFRCMdnCxjZCHifaKdVNKcJYO1dbINyIxNgbMS89CscQt8Kf2IQINd6h1BsG0UAXwBuFE9gJwRkcg78AEYQ6nwAIgAmGZDObgmpETEoecXyaUCoSaVVWYX+Wi9HA7djU2PtqutVu0itw09dR78Anhe7djDsy6CdbZH7JOQA05ZbiOUFOc4Q4rXMrQ278aqpFH7KZtJqbE52BrtHATFC9FD9VJQYTDJAAOnptBIFD+4UxczJFMGwjAwwAFABbEAAJQgAGMAJQIAB8yHptMFItFTNCrMi4zJAypw25vNokqAA) sehingga bisa coba-coba sintaksis tanpa perlu instalasi terlebih dahulu.\n\nSaya sendiri lebih senang melihat contoh kasus aplikasi yang telah dibuat menggunakan ReasonML, dan syukurnya di halaman utamanya bahkan sudah diberikan tautan yang salah satunya mengarah ke proyek [HackerNews ↗️](https://github.com/reasonml-community/reason-react-hacker-news) yang dibuat menggunakan ReasonML dan React.\n\nSaya memutuskan untuk melihat dan mempelajari bagaimana ReasonML bisa dikombinasikan dengan React untuk membangun sebuah antarmuka website melalui proyek HackerNews tersebut diatas.\n\nMembuat proyek sendiri berdasarkan proyek yang sudah jadi lebih mudah bagi saya untuk melewati berbagai langkah untuk setup sebuah proyek yang biasanya lumayan memakan waktu di awal. Saya membuat proyek sederhana [https://github.com/mazipan/ghibli-reasonreact ↗️](https://github.com/mazipan/ghibli-reasonreact) yang kurang lebih saya akan membuat dua halaman yakni halaman listing dan halaman detail, datanya akan mengambil dari API publik yang disediakan pihak ketiga.\n\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="https://github.com/mazipan/ghibli-reasonreact/raw/master/screenshoot.png" alt="Ghibli ReasonReact" height="200px" width="200px">\n\n## Yang saya pelajari sampai saat ini\n\n### Menentukan tipe data\n\nKarena type safe, jadi kita mesti tau bagaimana membuat tipe data yang benar agar efektif. Meskipun pada ReasonML kita hampir tidak perlu menyebutkan tipe data yang dibutuhkan pada setiap fungsi yang dibuat, namun ReasonML akan selalu mengecek validitas tipe data yang digunakan pada setiap build.\n\nTentu proyek pertama saya sangat cupu, jauh dari kata benar. Termasuk penentuan tipe data, seperti ada satu bagian yang saya menentukan menggunakan List padahal seharusnya lebih efektif bila menggunakan Map. Saya juga harus membuat definisi tipe data dari berbagai response yang saya ambil dari pihak ketiga agar mudah ketika dibaca di tempat lain.\n\n### "Return" yang tidak terlihat\n\nSetiap fungsi di ReasonML harus mengembalikan nilai meskipun kita tidak perlu secara langsung menentukan baris mana yang menjadi balikan. ReasonML secara otomatis akan membaca baris terakhir sebagai balikan dari fungsi yang kalian buat. Ini seringkali terlupakan oleh saya yang terlalu terbiasa ngoding JavaScript.\n\n### Immutable Data\n\nTemen-temen yang terbiasa dengan React sebenarnya mestinya sudah terbiasa dengan immutable data, namun tidak dengan saya yang biasanya menggunakan Vue sebagai framework utama sehari-hari. Vue yang mengedepankan Reactivitynya menjadi susah untuk implementasi immutable data. Di ReasonML hal ini secara native didukung oleh bahasanya, meskipun sebenarnya kita masih bisa mengubah nilai variable menggunakan `ref` dari variable tersebut.\n\n### Dukungan "Hooks" secara bawaan\n\nReason dengan ReasonReact-nya secara bawaan sudah mendukung dan merekomendasikan menggunakan Hooks di komponennya, sehingga memaksa kita secara tidak langsung untuk belajar dan menggunakan lebih banyak fitur ini.\n\n### Perbedaan sintaksis pada Siklus Hidup\n\nBila pada React kita menggunakan `componentDidMount` di ReasonReact kita bisa menggunakan `didMount` saja. Ya, cuma beda sintaksis aja sih. Tapi bisa cukup bikin bingung pas pertama kali. Berikut beberapa siklus hidup yang didukung di ReasonReact:\n\n| Siklus Hidup           | Parameter     |\n| ---------------------- |:-------------:|\n| `didMount`             | self          |\n| `willReceiveProps`     | self          |\n| `shouldUpdate`         | {oldSelf, newSelf} |\n| `willUpdate`           | {oldSelf, newSelf} |\n| `didUpdate`            | {oldSelf, newSelf} |\n| `willUnmount`          | self          |\n\nSelengkapnya baca [disini ↗️](https://github.com/reasonml/reason-react/blob/master/docs/lifecycles.md)\n\n### Mengatur struktur direktori pada projek ReasonML\n\nAwalnya saya mengikuti contoh pada HackerNews yang menerapkan Flat Structure dimana semua file ada pada satu direktori yang sama, namun memang menjadi "kotor" dan berantakan seiring semakin banyaknya berkas di dalamnya.\n\nUntungnya mas [Muhammad Ridho Assuryadi ↗️](https://github.com/muhammadridho) membantu saya untuk merapikan dan memperbaiki struktur dari proyek ini. Memisahkan berkas ke direktori yang berbeda-beda tergantung fungsinya. Hal ini memang sempat membingungankan saya, sebab di ReasonML kita tidak melakukan *import* berdasarkan lokasi *Path* sebuah berkas seperti yang biasa kita lakukan di JavaScript sehingga bisa menimbulkan kerancuan bila tidak menerapkan *namespace* dengan benar pada dua berkas yang sama namanya.\n\n### Konvensi\n\nSaya sampai sekarang belum menemukan referensi yang pas untuk belajar mengenai konvensi yang benar dan umum di terapkan di ReasonML, seperti penggunaan case apakah menggunakan camelCase atau kebab-case. Sementara berdasarkan dari kode yang di push oleh mas [Muhammad Ridho Assuryadi ↗️](https://github.com/muhammadridho) sendiri masih menggunakan dua hal yang berbeda ini di beberapa tempatnya.\n\nNanti saya akan perbarui post ini bila sudah menemukan referensi yang tepat untuk hal ini.\n\n## Repositori hasil belajar\n\n[https://github.com/mazipan/ghibli-reasonreact ↗️](https://github.com/mazipan/ghibli-reasonreact)\n\n### Demikian artikel kali ini, semoga bermanfaat...\n',html:'<h2>ReasonML, makanan apa ya?</h2>\n<p>ReasonML (baca: Alasan Bercinta), bila saya kutip dari kata-kata mas Riza di blognya yang dipublikasikan <a href="https://rizafahmi.com/2018/12/10/perkenalan-reasonml/">disini  ↗️</a> adalah sebuah sintaks yang berada diatas bahasa <a href="https://ocaml.org/">OCaml  ↗️</a>. ReasonML bisa menjadi bahasa yang <em>compiled-to-js</em> dengan bantuan <a href="https://bucklescript.github.io/">BuckleScript  ↗️</a> sehingga menjadikan ReasonML pada akhirnya bisa langsung dibandingkan dengan TypeScript.</p>\n<p>Lucunya, saya juga bahkan pertama kali dengar namanya bukan hasil dari baca dokumentasi resmi atau dengerin video kursus keren apapun tapi dari presentasi mas Riza Fahmi di <a href="https://www.meetup.com/JakartaJS/events/256965042/">JakartaJS #45  ↗️</a> yang membahas State of JavaScript di 2018.</p>\n<h2>Alasan klise belajar ReasonML</h2>\n<p>Masing-masing orang pasti punya alasan kenapa ingin belajar ini itu, atau alasan kenapa menggunakan ini dan itu. Mas Riza pun sudah menjelaskan beberapa alasan umum yang bisa kalian ambil sebagai pelecut untuk belajar ReasonML di tahun ini atau tahun depan (kalau masih ada 🤣).</p>\n<p>Bagi saya pribadi sendiri, beberapa alasan klise kenapa kalian harus belajar ReasonML tahun ini antara lain:</p>\n<h3>Anti Maintstream</h3>\n<p>Ini bisa jadi alasan ampuh bagi kalian yang gampang jenuh dengan suatu teknologi, belajar hal-hal yang belum marak di pasaran bisa memberikan kepuasan berbeda pada prosesnya. Pun bilamana teknologi tersebut pada akhirnya memiliki perkembangan yang bagus kedepannya, maka kalian bisa bersyukur karena sudah mengambil langkah belajar lebih dini.</p>\n<h3>Facebook Centric Development</h3>\n<p>Sudah diketahui bersama bahwa dalam lingkungan developer sering terjadi perbedaan mazhab antara satu developer dengan developer lain, dimana biasanya pengambilan mazhab ini berpengaruh terhadap pemilihan teknologi pendukung di sekitarnya yang akan disesuaikan dengan mazhab yang mereka anut.</p>\n<p>Facebook menjadi salah satu kiblat yang akhir-akhir ini menunjukan gelagat yang sangat baik dalam mendukung lingkungan developer. Banyak sekali alat, framework, teknologi bahkan dokumentasi terkait berbagai teknologi keluaran facebook yang dibuka sebagai kode terbuka. Mengikuti mazhab Facebook tentu bukan hal yang salah, dimana paling tidak kita bisa bersembunyi dibalik nama besar dan konsistensi Facebook dalam memelihara berbagai proyek kode terbuka mereka.</p>\n<p>ReasonML seperti diketahui juga dipelihara oleh tim Facebook yang bisa memberikan jaminan lebih terhadap perkembangan dan adopsi kedepannya.</p>\n<h3>Type Safe</h3>\n<p>Iya, sudah ada TypeScript. Tapi kan gak semua orang seneng pakai TypeScript. Pun bahwa tidak semua orang suka bila ada satu teknologi yang menjadi terlalu besar pada satu segmen. Untuk bahasa yang <em>Type Safe</em> di JavaScript memang saat ini TypeScript menjadi salah satu favorit banyak developer, tapi memberikan alternatif lain menjadi hal yang wajib agar masing-masing bisa terus berkembang dan saling berkompetisi.</p>\n<p>ReasonML yang mengambil bahasa dasar dari OCaml diuntungkan dengan <em>Type System</em> yang sudah cukup mature dan teruji, ditambah kemampuan menebak <em>Type</em> dari suatu data tanpa perlu mendefinikan <em>Type</em> secara langsung (<em>Type Inference</em>) menjadikan kelebihan ReasonML dalam hal <em>Type System</em> semakin komplit.</p>\n<h3>Functional</h3>\n<p>OCaml memang bahasa yang dasarnya menggunakan paradigma fungsional sehingga ReasonML pun mewarisi sifat ini. Bagi temen-temen yang ingin belajar bahasa dengan paradigma fungsional namun tidak terlalu <em>strict</em>, maka ReasonML salah satu pilihan terbaik buat temen-temen memulai.</p>\n<h2>Siapa yang sudah pakai ReasonML?</h2>\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="/content-images/tasting-reasonml-for-react/reasonml-users.png" alt="ReasonML Users" height="200px" width="200px">\n<p>Belum banyak pengguna ReasonML di dunia, tapi beberapa perusahaan besar sudah mulai mengadopsinya di production mereka. Di Indonesia sendiri sepertinya baru <a href="https://career.ruangguru.com/">Ruangguru ↗️</a> yang berani terang-terangan menggunakan ReasonML di production.</p>\n<h2>Cara Saya Belajar</h2>\n<p>Saya bukan orang yang senang belajar sintaksis karena jujur saja ini justru menjadi bagian yang paling membosankan dan gampang terlupakan oleh saya pribadi. Kalau kalian mampir ke <a href="https://reasonml.github.io/docs/en/overview">dokumentasi resminya ↗️</a>, kalian akan temui berbagai penjelasan lengkap dan contoh berbagai sintaksis dasar seperti penjelasan berbagai tipe data, tuple, record, variant dan sebagainya dengan mudah. Sayangnya membaca bagian ini tidak akan berpengaruh banyak bagi saya, semenit kemudian juga sudah lupa.</p>\n<p>Bila temen-temen suka untuk belajar sintaksis terlebih dahulu, bisa langsung mampir ke <a href="https://reasonml.github.io/en/try?rrjsx=true&amp;reason=C4TwDgpgBATlC8UDeAoKUD2A7CAuKAllsADRpTADuG+AzsDEQOZnrAAWMEehxrUAMwwBXGHQbN+AggDceRUuVoEAHuMZYWSiHKz4F-CASbtg6yeSxF5fcsAh6o9DVvQQANjof7bbSh7lzTX4OAhh7b15FdCFRCMdnCxjZCHifaKdVNKcJYO1dbINyIxNgbMS89CscQt8Kf2IQINd6h1BsG0UAXwBuFE9gJwRkcg78AEYQ6nwAIgAmGZDObgmpETEoecXyaUCoSaVVWYX+Wi9HA7djU2PtqutVu0itw09dR78Anhe7djDsy6CdbZH7JOQA05ZbiOUFOc4Q4rXMrQ278aqpFH7KZtJqbE52BrtHATFC9FD9VJQYTDJAAOnptBIFD+4UxczJFMGwjAwwAFABbEAAJQgAGMAJQIAB8yHptMFItFTNCrMi4zJAypw25vNokqAA">Playground ReasonML ↗️</a> sehingga bisa coba-coba sintaksis tanpa perlu instalasi terlebih dahulu.</p>\n<p>Saya sendiri lebih senang melihat contoh kasus aplikasi yang telah dibuat menggunakan ReasonML, dan syukurnya di halaman utamanya bahkan sudah diberikan tautan yang salah satunya mengarah ke proyek <a href="https://github.com/reasonml-community/reason-react-hacker-news">HackerNews ↗️</a> yang dibuat menggunakan ReasonML dan React.</p>\n<p>Saya memutuskan untuk melihat dan mempelajari bagaimana ReasonML bisa dikombinasikan dengan React untuk membangun sebuah antarmuka website melalui proyek HackerNews tersebut diatas.</p>\n<p>Membuat proyek sendiri berdasarkan proyek yang sudah jadi lebih mudah bagi saya untuk melewati berbagai langkah untuk setup sebuah proyek yang biasanya lumayan memakan waktu di awal. Saya membuat proyek sederhana <a href="https://github.com/mazipan/ghibli-reasonreact">https://github.com/mazipan/ghibli-reasonreact ↗️</a> yang kurang lebih saya akan membuat dua halaman yakni halaman listing dan halaman detail, datanya akan mengambil dari API publik yang disediakan pihak ketiga.</p>\n<img v-lazyload src="/images/placeholder-1x1.png" data-src="https://github.com/mazipan/ghibli-reasonreact/raw/master/screenshoot.png" alt="Ghibli ReasonReact" height="200px" width="200px">\n<h2>Yang saya pelajari sampai saat ini</h2>\n<h3>Menentukan tipe data</h3>\n<p>Karena type safe, jadi kita mesti tau bagaimana membuat tipe data yang benar agar efektif. Meskipun pada ReasonML kita hampir tidak perlu menyebutkan tipe data yang dibutuhkan pada setiap fungsi yang dibuat, namun ReasonML akan selalu mengecek validitas tipe data yang digunakan pada setiap build.</p>\n<p>Tentu proyek pertama saya sangat cupu, jauh dari kata benar. Termasuk penentuan tipe data, seperti ada satu bagian yang saya menentukan menggunakan List padahal seharusnya lebih efektif bila menggunakan Map. Saya juga harus membuat definisi tipe data dari berbagai response yang saya ambil dari pihak ketiga agar mudah ketika dibaca di tempat lain.</p>\n<h3>&quot;Return&quot; yang tidak terlihat</h3>\n<p>Setiap fungsi di ReasonML harus mengembalikan nilai meskipun kita tidak perlu secara langsung menentukan baris mana yang menjadi balikan. ReasonML secara otomatis akan membaca baris terakhir sebagai balikan dari fungsi yang kalian buat. Ini seringkali terlupakan oleh saya yang terlalu terbiasa ngoding JavaScript.</p>\n<h3>Immutable Data</h3>\n<p>Temen-temen yang terbiasa dengan React sebenarnya mestinya sudah terbiasa dengan immutable data, namun tidak dengan saya yang biasanya menggunakan Vue sebagai framework utama sehari-hari. Vue yang mengedepankan Reactivitynya menjadi susah untuk implementasi immutable data. Di ReasonML hal ini secara native didukung oleh bahasanya, meskipun sebenarnya kita masih bisa mengubah nilai variable menggunakan <code>ref</code> dari variable tersebut.</p>\n<h3>Dukungan &quot;Hooks&quot; secara bawaan</h3>\n<p>Reason dengan ReasonReact-nya secara bawaan sudah mendukung dan merekomendasikan menggunakan Hooks di komponennya, sehingga memaksa kita secara tidak langsung untuk belajar dan menggunakan lebih banyak fitur ini.</p>\n<h3>Perbedaan sintaksis pada Siklus Hidup</h3>\n<p>Bila pada React kita menggunakan <code>componentDidMount</code> di ReasonReact kita bisa menggunakan <code>didMount</code> saja. Ya, cuma beda sintaksis aja sih. Tapi bisa cukup bikin bingung pas pertama kali. Berikut beberapa siklus hidup yang didukung di ReasonReact:</p>\n<table>\n<thead>\n<tr>\n<th>Siklus Hidup</th>\n<th style="text-align:center">Parameter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>didMount</code></td>\n<td style="text-align:center">self</td>\n</tr>\n<tr>\n<td><code>willReceiveProps</code></td>\n<td style="text-align:center">self</td>\n</tr>\n<tr>\n<td><code>shouldUpdate</code></td>\n<td style="text-align:center">{oldSelf, newSelf}</td>\n</tr>\n<tr>\n<td><code>willUpdate</code></td>\n<td style="text-align:center">{oldSelf, newSelf}</td>\n</tr>\n<tr>\n<td><code>didUpdate</code></td>\n<td style="text-align:center">{oldSelf, newSelf}</td>\n</tr>\n<tr>\n<td><code>willUnmount</code></td>\n<td style="text-align:center">self</td>\n</tr>\n</tbody>\n</table>\n<p>Selengkapnya baca <a href="https://github.com/reasonml/reason-react/blob/master/docs/lifecycles.md">disini ↗️</a></p>\n<h3>Mengatur struktur direktori pada projek ReasonML</h3>\n<p>Awalnya saya mengikuti contoh pada HackerNews yang menerapkan Flat Structure dimana semua file ada pada satu direktori yang sama, namun memang menjadi &quot;kotor&quot; dan berantakan seiring semakin banyaknya berkas di dalamnya.</p>\n<p>Untungnya mas <a href="https://github.com/muhammadridho">Muhammad Ridho Assuryadi ↗️</a> membantu saya untuk merapikan dan memperbaiki struktur dari proyek ini. Memisahkan berkas ke direktori yang berbeda-beda tergantung fungsinya. Hal ini memang sempat membingungankan saya, sebab di ReasonML kita tidak melakukan <em>import</em> berdasarkan lokasi <em>Path</em> sebuah berkas seperti yang biasa kita lakukan di JavaScript sehingga bisa menimbulkan kerancuan bila tidak menerapkan <em>namespace</em> dengan benar pada dua berkas yang sama namanya.</p>\n<h3>Konvensi</h3>\n<p>Saya sampai sekarang belum menemukan referensi yang pas untuk belajar mengenai konvensi yang benar dan umum di terapkan di ReasonML, seperti penggunaan case apakah menggunakan camelCase atau kebab-case. Sementara berdasarkan dari kode yang di push oleh mas <a href="https://github.com/muhammadridho">Muhammad Ridho Assuryadi ↗️</a> sendiri masih menggunakan dua hal yang berbeda ini di beberapa tempatnya.</p>\n<p>Nanti saya akan perbarui post ini bila sudah menemukan referensi yang tepat untuk hal ini.</p>\n<h2>Repositori hasil belajar</h2>\n<p><a href="https://github.com/mazipan/ghibli-reasonreact">https://github.com/mazipan/ghibli-reasonreact ↗️</a></p>\n<h3>Demikian artikel kali ini, semoga bermanfaat...</h3>\n',attributes:{title:"Mencicipi ReasonML untuk React",slug:"tasting-reasonml-for-react",date:"2019-05-19",minute2read:10,description:"Menceritakan bagaimana rasanya mencicipi sintaksis ReasonML untuk membangun antarmuka sebuah website",categories:["javascript","react","reasonml"],cover:"https://www.mazipan.xyz/content-images/tasting-reasonml-for-react/reasonml-users.png",_meta:{resourcePath:"/home/travis/build/mazipan/blog-2.0/contents/published/tasting-reasonml-for-react/index.md"}},vue:{render:'return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"content-markdown"},[_c(\'h2\',[_vm._v("ReasonML, makanan apa ya?")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_vm._m(1),_vm._v(" "),_c(\'h2\',[_vm._v("Alasan klise belajar ReasonML")]),_vm._v(" "),_c(\'p\',[_vm._v("Masing-masing orang pasti punya alasan kenapa ingin belajar ini itu, atau alasan kenapa menggunakan ini dan itu. Mas Riza pun sudah menjelaskan beberapa alasan umum yang bisa kalian ambil sebagai pelecut untuk belajar ReasonML di tahun ini atau tahun depan (kalau masih ada 🤣).")]),_vm._v(" "),_c(\'p\',[_vm._v("Bagi saya pribadi sendiri, beberapa alasan klise kenapa kalian harus belajar ReasonML tahun ini antara lain:")]),_vm._v(" "),_c(\'h3\',[_vm._v("Anti Maintstream")]),_vm._v(" "),_c(\'p\',[_vm._v("Ini bisa jadi alasan ampuh bagi kalian yang gampang jenuh dengan suatu teknologi, belajar hal-hal yang belum marak di pasaran bisa memberikan kepuasan berbeda pada prosesnya. Pun bilamana teknologi tersebut pada akhirnya memiliki perkembangan yang bagus kedepannya, maka kalian bisa bersyukur karena sudah mengambil langkah belajar lebih dini.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Facebook Centric Development")]),_vm._v(" "),_c(\'p\',[_vm._v("Sudah diketahui bersama bahwa dalam lingkungan developer sering terjadi perbedaan mazhab antara satu developer dengan developer lain, dimana biasanya pengambilan mazhab ini berpengaruh terhadap pemilihan teknologi pendukung di sekitarnya yang akan disesuaikan dengan mazhab yang mereka anut.")]),_vm._v(" "),_c(\'p\',[_vm._v("Facebook menjadi salah satu kiblat yang akhir-akhir ini menunjukan gelagat yang sangat baik dalam mendukung lingkungan developer. Banyak sekali alat, framework, teknologi bahkan dokumentasi terkait berbagai teknologi keluaran facebook yang dibuka sebagai kode terbuka. Mengikuti mazhab Facebook tentu bukan hal yang salah, dimana paling tidak kita bisa bersembunyi dibalik nama besar dan konsistensi Facebook dalam memelihara berbagai proyek kode terbuka mereka.")]),_vm._v(" "),_c(\'p\',[_vm._v("ReasonML seperti diketahui juga dipelihara oleh tim Facebook yang bisa memberikan jaminan lebih terhadap perkembangan dan adopsi kedepannya.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Type Safe")]),_vm._v(" "),_vm._m(2),_vm._v(" "),_vm._m(3),_vm._v(" "),_c(\'h3\',[_vm._v("Functional")]),_vm._v(" "),_vm._m(4),_vm._v(" "),_c(\'h2\',[_vm._v("Siapa yang sudah pakai ReasonML?")]),_vm._v(" "),_c(\'img\',{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{"src":"/images/placeholder-1x1.png","data-src":"/content-images/tasting-reasonml-for-react/reasonml-users.png","alt":"ReasonML Users","height":"200px","width":"200px"}}),_vm._v(" "),_vm._m(5),_vm._v(" "),_c(\'h2\',[_vm._v("Cara Saya Belajar")]),_vm._v(" "),_vm._m(6),_vm._v(" "),_vm._m(7),_vm._v(" "),_vm._m(8),_vm._v(" "),_c(\'p\',[_vm._v("Saya memutuskan untuk melihat dan mempelajari bagaimana ReasonML bisa dikombinasikan dengan React untuk membangun sebuah antarmuka website melalui proyek HackerNews tersebut diatas.")]),_vm._v(" "),_vm._m(9),_vm._v(" "),_c(\'img\',{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{"src":"/images/placeholder-1x1.png","data-src":"https://github.com/mazipan/ghibli-reasonreact/raw/master/screenshoot.png","alt":"Ghibli ReasonReact","height":"200px","width":"200px"}}),_vm._v(" "),_c(\'h2\',[_vm._v("Yang saya pelajari sampai saat ini")]),_vm._v(" "),_c(\'h3\',[_vm._v("Menentukan tipe data")]),_vm._v(" "),_c(\'p\',[_vm._v("Karena type safe, jadi kita mesti tau bagaimana membuat tipe data yang benar agar efektif. Meskipun pada ReasonML kita hampir tidak perlu menyebutkan tipe data yang dibutuhkan pada setiap fungsi yang dibuat, namun ReasonML akan selalu mengecek validitas tipe data yang digunakan pada setiap build.")]),_vm._v(" "),_c(\'p\',[_vm._v("Tentu proyek pertama saya sangat cupu, jauh dari kata benar. Termasuk penentuan tipe data, seperti ada satu bagian yang saya menentukan menggunakan List padahal seharusnya lebih efektif bila menggunakan Map. Saya juga harus membuat definisi tipe data dari berbagai response yang saya ambil dari pihak ketiga agar mudah ketika dibaca di tempat lain.")]),_vm._v(" "),_c(\'h3\',[_vm._v("\\"Return\\" yang tidak terlihat")]),_vm._v(" "),_c(\'p\',[_vm._v("Setiap fungsi di ReasonML harus mengembalikan nilai meskipun kita tidak perlu secara langsung menentukan baris mana yang menjadi balikan. ReasonML secara otomatis akan membaca baris terakhir sebagai balikan dari fungsi yang kalian buat. Ini seringkali terlupakan oleh saya yang terlalu terbiasa ngoding JavaScript.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Immutable Data")]),_vm._v(" "),_vm._m(10),_vm._v(" "),_c(\'h3\',[_vm._v("Dukungan \\"Hooks\\" secara bawaan")]),_vm._v(" "),_c(\'p\',[_vm._v("Reason dengan ReasonReact-nya secara bawaan sudah mendukung dan merekomendasikan menggunakan Hooks di komponennya, sehingga memaksa kita secara tidak langsung untuk belajar dan menggunakan lebih banyak fitur ini.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Perbedaan sintaksis pada Siklus Hidup")]),_vm._v(" "),_vm._m(11),_vm._v(" "),_vm._m(12),_vm._v(" "),_vm._m(13),_vm._v(" "),_c(\'h3\',[_vm._v("Mengatur struktur direktori pada projek ReasonML")]),_vm._v(" "),_c(\'p\',[_vm._v("Awalnya saya mengikuti contoh pada HackerNews yang menerapkan Flat Structure dimana semua file ada pada satu direktori yang sama, namun memang menjadi \\"kotor\\" dan berantakan seiring semakin banyaknya berkas di dalamnya.")]),_vm._v(" "),_vm._m(14),_vm._v(" "),_c(\'h3\',[_vm._v("Konvensi")]),_vm._v(" "),_vm._m(15),_vm._v(" "),_c(\'p\',[_vm._v("Nanti saya akan perbarui post ini bila sudah menemukan referensi yang tepat untuk hal ini.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Repositori hasil belajar")]),_vm._v(" "),_vm._m(16),_vm._v(" "),_c(\'h3\',[_vm._v("Demikian artikel kali ini, semoga bermanfaat...")])]) }',staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("ReasonML (baca: Alasan Bercinta), bila saya kutip dari kata-kata mas Riza di blognya yang dipublikasikan "),_c(\'a\',{attrs:{"href":"https://rizafahmi.com/2018/12/10/perkenalan-reasonml/"}},[_vm._v("disini  ↗️")]),_vm._v(" adalah sebuah sintaks yang berada diatas bahasa "),_c(\'a\',{attrs:{"href":"https://ocaml.org/"}},[_vm._v("OCaml  ↗️")]),_vm._v(". ReasonML bisa menjadi bahasa yang "),_c(\'em\',[_vm._v("compiled-to-js")]),_vm._v(" dengan bantuan "),_c(\'a\',{attrs:{"href":"https://bucklescript.github.io/"}},[_vm._v("BuckleScript  ↗️")]),_vm._v(" sehingga menjadikan ReasonML pada akhirnya bisa langsung dibandingkan dengan TypeScript.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Lucunya, saya juga bahkan pertama kali dengar namanya bukan hasil dari baca dokumentasi resmi atau dengerin video kursus keren apapun tapi dari presentasi mas Riza Fahmi di "),_c(\'a\',{attrs:{"href":"https://www.meetup.com/JakartaJS/events/256965042/"}},[_vm._v("JakartaJS #45  ↗️")]),_vm._v(" yang membahas State of JavaScript di 2018.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Iya, sudah ada TypeScript. Tapi kan gak semua orang seneng pakai TypeScript. Pun bahwa tidak semua orang suka bila ada satu teknologi yang menjadi terlalu besar pada satu segmen. Untuk bahasa yang "),_c(\'em\',[_vm._v("Type Safe")]),_vm._v(" di JavaScript memang saat ini TypeScript menjadi salah satu favorit banyak developer, tapi memberikan alternatif lain menjadi hal yang wajib agar masing-masing bisa terus berkembang dan saling berkompetisi.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("ReasonML yang mengambil bahasa dasar dari OCaml diuntungkan dengan "),_c(\'em\',[_vm._v("Type System")]),_vm._v(" yang sudah cukup mature dan teruji, ditambah kemampuan menebak "),_c(\'em\',[_vm._v("Type")]),_vm._v(" dari suatu data tanpa perlu mendefinikan "),_c(\'em\',[_vm._v("Type")]),_vm._v(" secara langsung ("),_c(\'em\',[_vm._v("Type Inference")]),_vm._v(") menjadikan kelebihan ReasonML dalam hal "),_c(\'em\',[_vm._v("Type System")]),_vm._v(" semakin komplit.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("OCaml memang bahasa yang dasarnya menggunakan paradigma fungsional sehingga ReasonML pun mewarisi sifat ini. Bagi temen-temen yang ingin belajar bahasa dengan paradigma fungsional namun tidak terlalu "),_c(\'em\',[_vm._v("strict")]),_vm._v(", maka ReasonML salah satu pilihan terbaik buat temen-temen memulai.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Belum banyak pengguna ReasonML di dunia, tapi beberapa perusahaan besar sudah mulai mengadopsinya di production mereka. Di Indonesia sendiri sepertinya baru "),_c(\'a\',{attrs:{"href":"https://career.ruangguru.com/"}},[_vm._v("Ruangguru ↗️")]),_vm._v(" yang berani terang-terangan menggunakan ReasonML di production.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya bukan orang yang senang belajar sintaksis karena jujur saja ini justru menjadi bagian yang paling membosankan dan gampang terlupakan oleh saya pribadi. Kalau kalian mampir ke "),_c(\'a\',{attrs:{"href":"https://reasonml.github.io/docs/en/overview"}},[_vm._v("dokumentasi resminya ↗️")]),_vm._v(", kalian akan temui berbagai penjelasan lengkap dan contoh berbagai sintaksis dasar seperti penjelasan berbagai tipe data, tuple, record, variant dan sebagainya dengan mudah. Sayangnya membaca bagian ini tidak akan berpengaruh banyak bagi saya, semenit kemudian juga sudah lupa.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Bila temen-temen suka untuk belajar sintaksis terlebih dahulu, bisa langsung mampir ke "),_c(\'a\',{attrs:{"href":"https://reasonml.github.io/en/try?rrjsx=true&reason=C4TwDgpgBATlC8UDeAoKUD2A7CAuKAllsADRpTADuG+AzsDEQOZnrAAWMEehxrUAMwwBXGHQbN+AggDceRUuVoEAHuMZYWSiHKz4F-CASbtg6yeSxF5fcsAh6o9DVvQQANjof7bbSh7lzTX4OAhh7b15FdCFRCMdnCxjZCHifaKdVNKcJYO1dbINyIxNgbMS89CscQt8Kf2IQINd6h1BsG0UAXwBuFE9gJwRkcg78AEYQ6nwAIgAmGZDObgmpETEoecXyaUCoSaVVWYX+Wi9HA7djU2PtqutVu0itw09dR78Anhe7djDsy6CdbZH7JOQA05ZbiOUFOc4Q4rXMrQ278aqpFH7KZtJqbE52BrtHATFC9FD9VJQYTDJAAOnptBIFD+4UxczJFMGwjAwwAFABbEAAJQgAGMAJQIAB8yHptMFItFTNCrMi4zJAypw25vNokqAA"}},[_vm._v("Playground ReasonML ↗️")]),_vm._v(" sehingga bisa coba-coba sintaksis tanpa perlu instalasi terlebih dahulu.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya sendiri lebih senang melihat contoh kasus aplikasi yang telah dibuat menggunakan ReasonML, dan syukurnya di halaman utamanya bahkan sudah diberikan tautan yang salah satunya mengarah ke proyek "),_c(\'a\',{attrs:{"href":"https://github.com/reasonml-community/reason-react-hacker-news"}},[_vm._v("HackerNews ↗️")]),_vm._v(" yang dibuat menggunakan ReasonML dan React.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Membuat proyek sendiri berdasarkan proyek yang sudah jadi lebih mudah bagi saya untuk melewati berbagai langkah untuk setup sebuah proyek yang biasanya lumayan memakan waktu di awal. Saya membuat proyek sederhana "),_c(\'a\',{attrs:{"href":"https://github.com/mazipan/ghibli-reasonreact"}},[_vm._v("https://github.com/mazipan/ghibli-reasonreact ↗️")]),_vm._v(" yang kurang lebih saya akan membuat dua halaman yakni halaman listing dan halaman detail, datanya akan mengambil dari API publik yang disediakan pihak ketiga.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Temen-temen yang terbiasa dengan React sebenarnya mestinya sudah terbiasa dengan immutable data, namun tidak dengan saya yang biasanya menggunakan Vue sebagai framework utama sehari-hari. Vue yang mengedepankan Reactivitynya menjadi susah untuk implementasi immutable data. Di ReasonML hal ini secara native didukung oleh bahasanya, meskipun sebenarnya kita masih bisa mengubah nilai variable menggunakan "),_c(\'code\',{pre:true},[_vm._v("ref")]),_vm._v(" dari variable tersebut.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Bila pada React kita menggunakan "),_c(\'code\',{pre:true},[_vm._v("componentDidMount")]),_vm._v(" di ReasonReact kita bisa menggunakan "),_c(\'code\',{pre:true},[_vm._v("didMount")]),_vm._v(" saja. Ya, cuma beda sintaksis aja sih. Tapi bisa cukup bikin bingung pas pertama kali. Berikut beberapa siklus hidup yang didukung di ReasonReact:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'table\',[_c(\'thead\',[_c(\'tr\',[_c(\'th\',[_vm._v("Siklus Hidup")]),_vm._v(" "),_c(\'th\',{staticStyle:{"text-align":"center"}},[_vm._v("Parameter")])])]),_vm._v(" "),_c(\'tbody\',[_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("didMount")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("self")])]),_vm._v(" "),_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("willReceiveProps")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("self")])]),_vm._v(" "),_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("shouldUpdate")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("{oldSelf, newSelf}")])]),_vm._v(" "),_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("willUpdate")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("{oldSelf, newSelf}")])]),_vm._v(" "),_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("didUpdate")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("{oldSelf, newSelf}")])]),_vm._v(" "),_c(\'tr\',[_c(\'td\',[_c(\'code\',{pre:true},[_vm._v("willUnmount")])]),_vm._v(" "),_c(\'td\',{staticStyle:{"text-align":"center"}},[_vm._v("self")])])])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Selengkapnya baca "),_c(\'a\',{attrs:{"href":"https://github.com/reasonml/reason-react/blob/master/docs/lifecycles.md"}},[_vm._v("disini ↗️")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Untungnya mas "),_c(\'a\',{attrs:{"href":"https://github.com/muhammadridho"}},[_vm._v("Muhammad Ridho Assuryadi ↗️")]),_vm._v(" membantu saya untuk merapikan dan memperbaiki struktur dari proyek ini. Memisahkan berkas ke direktori yang berbeda-beda tergantung fungsinya. Hal ini memang sempat membingungankan saya, sebab di ReasonML kita tidak melakukan "),_c(\'em\',[_vm._v("import")]),_vm._v(" berdasarkan lokasi "),_c(\'em\',[_vm._v("Path")]),_vm._v(" sebuah berkas seperti yang biasa kita lakukan di JavaScript sehingga bisa menimbulkan kerancuan bila tidak menerapkan "),_c(\'em\',[_vm._v("namespace")]),_vm._v(" dengan benar pada dua berkas yang sama namanya.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Saya sampai sekarang belum menemukan referensi yang pas untuk belajar mengenai konvensi yang benar dan umum di terapkan di ReasonML, seperti penggunaan case apakah menggunakan camelCase atau kebab-case. Sementara berdasarkan dari kode yang di push oleh mas "),_c(\'a\',{attrs:{"href":"https://github.com/muhammadridho"}},[_vm._v("Muhammad Ridho Assuryadi ↗️")]),_vm._v(" sendiri masih menggunakan dua hal yang berbeda ini di beberapa tempatnya.")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_c(\'a\',{attrs:{"href":"https://github.com/mazipan/ghibli-reasonreact"}},[_vm._v("https://github.com/mazipan/ghibli-reasonreact ↗️")])]) }]',component:{data:function(){return{templateRender:null}},render:function(n){return this.templateRender?this.templateRender():n("div","Rendering")},created:function(){this.templateRender=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content-markdown"},[t("h2",[n._v("ReasonML, makanan apa ya?")]),n._v(" "),n._m(0),n._v(" "),n._m(1),n._v(" "),t("h2",[n._v("Alasan klise belajar ReasonML")]),n._v(" "),t("p",[n._v("Masing-masing orang pasti punya alasan kenapa ingin belajar ini itu, atau alasan kenapa menggunakan ini dan itu. Mas Riza pun sudah menjelaskan beberapa alasan umum yang bisa kalian ambil sebagai pelecut untuk belajar ReasonML di tahun ini atau tahun depan (kalau masih ada 🤣).")]),n._v(" "),t("p",[n._v("Bagi saya pribadi sendiri, beberapa alasan klise kenapa kalian harus belajar ReasonML tahun ini antara lain:")]),n._v(" "),t("h3",[n._v("Anti Maintstream")]),n._v(" "),t("p",[n._v("Ini bisa jadi alasan ampuh bagi kalian yang gampang jenuh dengan suatu teknologi, belajar hal-hal yang belum marak di pasaran bisa memberikan kepuasan berbeda pada prosesnya. Pun bilamana teknologi tersebut pada akhirnya memiliki perkembangan yang bagus kedepannya, maka kalian bisa bersyukur karena sudah mengambil langkah belajar lebih dini.")]),n._v(" "),t("h3",[n._v("Facebook Centric Development")]),n._v(" "),t("p",[n._v("Sudah diketahui bersama bahwa dalam lingkungan developer sering terjadi perbedaan mazhab antara satu developer dengan developer lain, dimana biasanya pengambilan mazhab ini berpengaruh terhadap pemilihan teknologi pendukung di sekitarnya yang akan disesuaikan dengan mazhab yang mereka anut.")]),n._v(" "),t("p",[n._v("Facebook menjadi salah satu kiblat yang akhir-akhir ini menunjukan gelagat yang sangat baik dalam mendukung lingkungan developer. Banyak sekali alat, framework, teknologi bahkan dokumentasi terkait berbagai teknologi keluaran facebook yang dibuka sebagai kode terbuka. Mengikuti mazhab Facebook tentu bukan hal yang salah, dimana paling tidak kita bisa bersembunyi dibalik nama besar dan konsistensi Facebook dalam memelihara berbagai proyek kode terbuka mereka.")]),n._v(" "),t("p",[n._v("ReasonML seperti diketahui juga dipelihara oleh tim Facebook yang bisa memberikan jaminan lebih terhadap perkembangan dan adopsi kedepannya.")]),n._v(" "),t("h3",[n._v("Type Safe")]),n._v(" "),n._m(2),n._v(" "),n._m(3),n._v(" "),t("h3",[n._v("Functional")]),n._v(" "),n._m(4),n._v(" "),t("h2",[n._v("Siapa yang sudah pakai ReasonML?")]),n._v(" "),t("img",{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{src:"/images/placeholder-1x1.png","data-src":"/content-images/tasting-reasonml-for-react/reasonml-users.png",alt:"ReasonML Users",height:"200px",width:"200px"}}),n._v(" "),n._m(5),n._v(" "),t("h2",[n._v("Cara Saya Belajar")]),n._v(" "),n._m(6),n._v(" "),n._m(7),n._v(" "),n._m(8),n._v(" "),t("p",[n._v("Saya memutuskan untuk melihat dan mempelajari bagaimana ReasonML bisa dikombinasikan dengan React untuk membangun sebuah antarmuka website melalui proyek HackerNews tersebut diatas.")]),n._v(" "),n._m(9),n._v(" "),t("img",{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{src:"/images/placeholder-1x1.png","data-src":"https://github.com/mazipan/ghibli-reasonreact/raw/master/screenshoot.png",alt:"Ghibli ReasonReact",height:"200px",width:"200px"}}),n._v(" "),t("h2",[n._v("Yang saya pelajari sampai saat ini")]),n._v(" "),t("h3",[n._v("Menentukan tipe data")]),n._v(" "),t("p",[n._v("Karena type safe, jadi kita mesti tau bagaimana membuat tipe data yang benar agar efektif. Meskipun pada ReasonML kita hampir tidak perlu menyebutkan tipe data yang dibutuhkan pada setiap fungsi yang dibuat, namun ReasonML akan selalu mengecek validitas tipe data yang digunakan pada setiap build.")]),n._v(" "),t("p",[n._v("Tentu proyek pertama saya sangat cupu, jauh dari kata benar. Termasuk penentuan tipe data, seperti ada satu bagian yang saya menentukan menggunakan List padahal seharusnya lebih efektif bila menggunakan Map. Saya juga harus membuat definisi tipe data dari berbagai response yang saya ambil dari pihak ketiga agar mudah ketika dibaca di tempat lain.")]),n._v(" "),t("h3",[n._v('"Return" yang tidak terlihat')]),n._v(" "),t("p",[n._v("Setiap fungsi di ReasonML harus mengembalikan nilai meskipun kita tidak perlu secara langsung menentukan baris mana yang menjadi balikan. ReasonML secara otomatis akan membaca baris terakhir sebagai balikan dari fungsi yang kalian buat. Ini seringkali terlupakan oleh saya yang terlalu terbiasa ngoding JavaScript.")]),n._v(" "),t("h3",[n._v("Immutable Data")]),n._v(" "),n._m(10),n._v(" "),t("h3",[n._v('Dukungan "Hooks" secara bawaan')]),n._v(" "),t("p",[n._v("Reason dengan ReasonReact-nya secara bawaan sudah mendukung dan merekomendasikan menggunakan Hooks di komponennya, sehingga memaksa kita secara tidak langsung untuk belajar dan menggunakan lebih banyak fitur ini.")]),n._v(" "),t("h3",[n._v("Perbedaan sintaksis pada Siklus Hidup")]),n._v(" "),n._m(11),n._v(" "),n._m(12),n._v(" "),n._m(13),n._v(" "),t("h3",[n._v("Mengatur struktur direktori pada projek ReasonML")]),n._v(" "),t("p",[n._v('Awalnya saya mengikuti contoh pada HackerNews yang menerapkan Flat Structure dimana semua file ada pada satu direktori yang sama, namun memang menjadi "kotor" dan berantakan seiring semakin banyaknya berkas di dalamnya.')]),n._v(" "),n._m(14),n._v(" "),t("h3",[n._v("Konvensi")]),n._v(" "),n._m(15),n._v(" "),t("p",[n._v("Nanti saya akan perbarui post ini bila sudah menemukan referensi yang tepat untuk hal ini.")]),n._v(" "),t("h2",[n._v("Repositori hasil belajar")]),n._v(" "),n._m(16),n._v(" "),t("h3",[n._v("Demikian artikel kali ini, semoga bermanfaat...")])])},this.$options.staticRenderFns=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("p",[n._v("ReasonML (baca: Alasan Bercinta), bila saya kutip dari kata-kata mas Riza di blognya yang dipublikasikan "),t("a",{attrs:{href:"https://rizafahmi.com/2018/12/10/perkenalan-reasonml/"}},[n._v("disini  ↗️")]),n._v(" adalah sebuah sintaks yang berada diatas bahasa "),t("a",{attrs:{href:"https://ocaml.org/"}},[n._v("OCaml  ↗️")]),n._v(". ReasonML bisa menjadi bahasa yang "),t("em",[n._v("compiled-to-js")]),n._v(" dengan bantuan "),t("a",{attrs:{href:"https://bucklescript.github.io/"}},[n._v("BuckleScript  ↗️")]),n._v(" sehingga menjadikan ReasonML pada akhirnya bisa langsung dibandingkan dengan TypeScript.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Lucunya, saya juga bahkan pertama kali dengar namanya bukan hasil dari baca dokumentasi resmi atau dengerin video kursus keren apapun tapi dari presentasi mas Riza Fahmi di "),e("a",{attrs:{href:"https://www.meetup.com/JakartaJS/events/256965042/"}},[this._v("JakartaJS #45  ↗️")]),this._v(" yang membahas State of JavaScript di 2018.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Iya, sudah ada TypeScript. Tapi kan gak semua orang seneng pakai TypeScript. Pun bahwa tidak semua orang suka bila ada satu teknologi yang menjadi terlalu besar pada satu segmen. Untuk bahasa yang "),e("em",[this._v("Type Safe")]),this._v(" di JavaScript memang saat ini TypeScript menjadi salah satu favorit banyak developer, tapi memberikan alternatif lain menjadi hal yang wajib agar masing-masing bisa terus berkembang dan saling berkompetisi.")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("p",[n._v("ReasonML yang mengambil bahasa dasar dari OCaml diuntungkan dengan "),t("em",[n._v("Type System")]),n._v(" yang sudah cukup mature dan teruji, ditambah kemampuan menebak "),t("em",[n._v("Type")]),n._v(" dari suatu data tanpa perlu mendefinikan "),t("em",[n._v("Type")]),n._v(" secara langsung ("),t("em",[n._v("Type Inference")]),n._v(") menjadikan kelebihan ReasonML dalam hal "),t("em",[n._v("Type System")]),n._v(" semakin komplit.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("OCaml memang bahasa yang dasarnya menggunakan paradigma fungsional sehingga ReasonML pun mewarisi sifat ini. Bagi temen-temen yang ingin belajar bahasa dengan paradigma fungsional namun tidak terlalu "),e("em",[this._v("strict")]),this._v(", maka ReasonML salah satu pilihan terbaik buat temen-temen memulai.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Belum banyak pengguna ReasonML di dunia, tapi beberapa perusahaan besar sudah mulai mengadopsinya di production mereka. Di Indonesia sendiri sepertinya baru "),e("a",{attrs:{href:"https://career.ruangguru.com/"}},[this._v("Ruangguru ↗️")]),this._v(" yang berani terang-terangan menggunakan ReasonML di production.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Saya bukan orang yang senang belajar sintaksis karena jujur saja ini justru menjadi bagian yang paling membosankan dan gampang terlupakan oleh saya pribadi. Kalau kalian mampir ke "),e("a",{attrs:{href:"https://reasonml.github.io/docs/en/overview"}},[this._v("dokumentasi resminya ↗️")]),this._v(", kalian akan temui berbagai penjelasan lengkap dan contoh berbagai sintaksis dasar seperti penjelasan berbagai tipe data, tuple, record, variant dan sebagainya dengan mudah. Sayangnya membaca bagian ini tidak akan berpengaruh banyak bagi saya, semenit kemudian juga sudah lupa.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Bila temen-temen suka untuk belajar sintaksis terlebih dahulu, bisa langsung mampir ke "),e("a",{attrs:{href:"https://reasonml.github.io/en/try?rrjsx=true&reason=C4TwDgpgBATlC8UDeAoKUD2A7CAuKAllsADRpTADuG+AzsDEQOZnrAAWMEehxrUAMwwBXGHQbN+AggDceRUuVoEAHuMZYWSiHKz4F-CASbtg6yeSxF5fcsAh6o9DVvQQANjof7bbSh7lzTX4OAhh7b15FdCFRCMdnCxjZCHifaKdVNKcJYO1dbINyIxNgbMS89CscQt8Kf2IQINd6h1BsG0UAXwBuFE9gJwRkcg78AEYQ6nwAIgAmGZDObgmpETEoecXyaUCoSaVVWYX+Wi9HA7djU2PtqutVu0itw09dR78Anhe7djDsy6CdbZH7JOQA05ZbiOUFOc4Q4rXMrQ278aqpFH7KZtJqbE52BrtHATFC9FD9VJQYTDJAAOnptBIFD+4UxczJFMGwjAwwAFABbEAAJQgAGMAJQIAB8yHptMFItFTNCrMi4zJAypw25vNokqAA"}},[this._v("Playground ReasonML ↗️")]),this._v(" sehingga bisa coba-coba sintaksis tanpa perlu instalasi terlebih dahulu.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Saya sendiri lebih senang melihat contoh kasus aplikasi yang telah dibuat menggunakan ReasonML, dan syukurnya di halaman utamanya bahkan sudah diberikan tautan yang salah satunya mengarah ke proyek "),e("a",{attrs:{href:"https://github.com/reasonml-community/reason-react-hacker-news"}},[this._v("HackerNews ↗️")]),this._v(" yang dibuat menggunakan ReasonML dan React.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Membuat proyek sendiri berdasarkan proyek yang sudah jadi lebih mudah bagi saya untuk melewati berbagai langkah untuk setup sebuah proyek yang biasanya lumayan memakan waktu di awal. Saya membuat proyek sederhana "),e("a",{attrs:{href:"https://github.com/mazipan/ghibli-reasonreact"}},[this._v("https://github.com/mazipan/ghibli-reasonreact ↗️")]),this._v(" yang kurang lebih saya akan membuat dua halaman yakni halaman listing dan halaman detail, datanya akan mengambil dari API publik yang disediakan pihak ketiga.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Temen-temen yang terbiasa dengan React sebenarnya mestinya sudah terbiasa dengan immutable data, namun tidak dengan saya yang biasanya menggunakan Vue sebagai framework utama sehari-hari. Vue yang mengedepankan Reactivitynya menjadi susah untuk implementasi immutable data. Di ReasonML hal ini secara native didukung oleh bahasanya, meskipun sebenarnya kita masih bisa mengubah nilai variable menggunakan "),e("code",{pre:!0},[this._v("ref")]),this._v(" dari variable tersebut.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Bila pada React kita menggunakan "),e("code",{pre:!0},[this._v("componentDidMount")]),this._v(" di ReasonReact kita bisa menggunakan "),e("code",{pre:!0},[this._v("didMount")]),this._v(" saja. Ya, cuma beda sintaksis aja sih. Tapi bisa cukup bikin bingung pas pertama kali. Berikut beberapa siklus hidup yang didukung di ReasonReact:")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("table",[t("thead",[t("tr",[t("th",[n._v("Siklus Hidup")]),n._v(" "),t("th",{staticStyle:{"text-align":"center"}},[n._v("Parameter")])])]),n._v(" "),t("tbody",[t("tr",[t("td",[t("code",{pre:!0},[n._v("didMount")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("self")])]),n._v(" "),t("tr",[t("td",[t("code",{pre:!0},[n._v("willReceiveProps")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("self")])]),n._v(" "),t("tr",[t("td",[t("code",{pre:!0},[n._v("shouldUpdate")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("{oldSelf, newSelf}")])]),n._v(" "),t("tr",[t("td",[t("code",{pre:!0},[n._v("willUpdate")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("{oldSelf, newSelf}")])]),n._v(" "),t("tr",[t("td",[t("code",{pre:!0},[n._v("didUpdate")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("{oldSelf, newSelf}")])]),n._v(" "),t("tr",[t("td",[t("code",{pre:!0},[n._v("willUnmount")])]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("self")])])])])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Selengkapnya baca "),e("a",{attrs:{href:"https://github.com/reasonml/reason-react/blob/master/docs/lifecycles.md"}},[this._v("disini ↗️")])])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("p",[n._v("Untungnya mas "),t("a",{attrs:{href:"https://github.com/muhammadridho"}},[n._v("Muhammad Ridho Assuryadi ↗️")]),n._v(" membantu saya untuk merapikan dan memperbaiki struktur dari proyek ini. Memisahkan berkas ke direktori yang berbeda-beda tergantung fungsinya. Hal ini memang sempat membingungankan saya, sebab di ReasonML kita tidak melakukan "),t("em",[n._v("import")]),n._v(" berdasarkan lokasi "),t("em",[n._v("Path")]),n._v(" sebuah berkas seperti yang biasa kita lakukan di JavaScript sehingga bisa menimbulkan kerancuan bila tidak menerapkan "),t("em",[n._v("namespace")]),n._v(" dengan benar pada dua berkas yang sama namanya.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[this._v("Saya sampai sekarang belum menemukan referensi yang pas untuk belajar mengenai konvensi yang benar dan umum di terapkan di ReasonML, seperti penggunaan case apakah menggunakan camelCase atau kebab-case. Sementara berdasarkan dari kode yang di push oleh mas "),e("a",{attrs:{href:"https://github.com/muhammadridho"}},[this._v("Muhammad Ridho Assuryadi ↗️")]),this._v(" sendiri masih menggunakan dua hal yang berbeda ini di beberapa tempatnya.")])},function(){var n=this.$createElement,e=this._self._c||n;return e("p",[e("a",{attrs:{href:"https://github.com/mazipan/ghibli-reasonreact"}},[this._v("https://github.com/mazipan/ghibli-reasonreact ↗️")])])}]}}}}}}]);