(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{204:function(e,t){e.exports={body:"As we all know that the default from the Nuxt project will be to create a code based on JavaScript Vanilla. Whereas the increasingly widespread use of TypeScript among JavaScript developers makes me personally interested in implementing the use of TypeScript on my open source code project.\n\n<img v-lazyload src=\"/images/placeholder-1x1.png\" data-src=\"/content-images/migrate-nuxt-to-typescript/quran-offline.png\" alt=\"Quran Offline\" height=\"200px\" width=\"200px\">\n\nThe following are the things I worked on in the migration process:\n\n## Adding tsconfig.json\n\n```javascript\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\"esnext\", \"esnext.asynciterable\", \"dom\"],\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true,\n    \"resolveJsonModule\": true,\n    \"allowJs\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"noImplicitAny\": false,\n    \"strictNullChecks\": false,\n    \"noEmit\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"~/*\": [\"./*\"],\n      \"@/*\": [\"./*\"]\n    },\n    \"types\": [\"@types/jest\", \"@types/node\", \"@nuxt/vue-app\"]\n  },\n  \"exclude\": [\n    \"nuxt.config.ts\",\n    \"node_modules/**\",\n    \"dist/**\",\n    \".nuxt/**\",\n    \"tests/**\"\n  ]\n}\n```\n\nTo add this file, I also need to add the following dependencies:\n\n```javascript\n{\n  \"@nuxt/typescript\": \"2.7.1\",\n  \"@types/jest\": \"24.0.13\",\n  \"@types/node\": \"11.13.10\",\n  \"typescript\": \"3.4.5\"\n}\n```\n\n## Update eslintrc.js\n\n```javascript\nmodule.exports = {\n  plugins: ['@typescript-eslint'],\n  parserOptions: {\n    parser: '@typescript-eslint/parser'\n  },\n  extends: [\n    '@nuxtjs',\n    'plugin:nuxt/recommended',\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unused-vars': 'off',\n    'vue/component-name-in-template-casing': [\n      'error',\n      'PascalCase',\n      {\n        ignores: ['nuxt', 'nuxt-link', 'nuxt-child', 'no-ssr']\n      }\n    ],\n    'vue/html-closing-bracket-newline': [\n      'error',\n      {\n        singleline: 'never',\n        multiline: 'never'\n      }\n    ]\n  }\n}\n```\n\nAnd add some of the following dependencies:\n\n```javascript\n{\n  \"@nuxtjs/eslint-config\": \"0.0.1\",\n  \"@typescript-eslint/eslint-plugin\": \"1.9.0\"\n}\n```\n\n## Rename nuxt.config.js to nuxt.config.ts\n\nChange the file extension and make a few changes to the following:\n\n```javascript\nimport NuxtConfiguration from '@nuxt/config'\nimport {\n  Configuration as WebpackConfiguration\n} from 'webpack'\n\nconst config: NuxtConfiguration = {\n  mode: 'universal',\n  head: {},\n  build: {\n    extend(config: WebpackConfiguration, ctx) {\n    }\n  }\n}\n\nexport default config\n```\n\n## Refactor the Vuex Store\n\nBecause almost all the components in my project have used the Vuex Store, so I put this as the first for me to refactor before refactor the component. To use Vuex with TypeScript there are few changes compared to when using regular JavaScript, here are the changes that I am working on:\n\n### Classic Store\n\nIn this project I still use the Classic Store, which is actually deprecated and will be removed in Nuxt v3 in the future, the following classic store that I created in the `store/index.ts` file:\n\n```javascript\nimport Vuex from 'vuex'\n\nimport { state } from './state'\nimport { mutations } from './mutations'\nimport { actions } from './actions'\n\nconst createStore = () => {\n  return new Vuex.Store({\n    state: state(),\n    mutations,\n    actions\n  })\n}\n\nexport default createStore\n```\n\n### State\n\nIn the `state.ts` file, I create an interface that is the type definitions of the state and creates a state with various initial value like the following example:\n\n```javascript\nexport interface StateType {\n  isShowSidebar: boolean,\n}\n\n// initial state\nexport const state = (): StateType => ({\n  isShowSidebar: false\n})\n```\n\n### Mutations\n\nVuex itself has provided support for TypeScript by providing data types in return for Mutations by simply importing `MutationTree` from Vuex, following the sample code:\n\n```javascript\nimport { MutationTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const mutations: MutationTree<StateType> = {\n  [Types.SET_SHOW_SIDEBAR](state: StateType, data: boolean) {\n    state.isShowSidebar = data\n  }\n}\n```\n\n### Actions\n\nFor the actions themselves it is almost similar to the mutations in which the data type from Vuex has been provided, such as the following code example:\n\n```javascript\nimport { ActionTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const actions: ActionTree<StateType, StateType> = {\n  setShowSidebar({ commit }, payload) {\n    commit(Types.SET_SHOW_SIDEBAR, payload)\n  }\n}\n```\n\n## Refactor the Components\n\nAfter successfully refactor the Vuex Store, then we will refactor our component code to support TypeScript.\n\nTo support TypeScript, we need to add some new dependencies like the following:\n\n```javascript\n{\n  \"vue-class-component\": \"7.1.0\",\n  \"vue-property-decorator\": \"8.1.1\",\n  \"vuex-class\": \"0.3.2\"\n}\n```\n\nFirst of all, of course we have to change the code in the single component file Vue that previously only `<script><\/script>` becomes `<script lang = \"ts\"> <\/script>`so we can support the TypeScript code in the script section . And here is the `default.vue` layout example that I refactor using TypeScript:\n\n```javascript\nimport { Component, Vue } from 'vue-property-decorator'\nimport { State, Mutation, Action } from 'vuex-class'\n\nimport ArrowUpIcon from 'vue-ionicons/dist/js/ios-arrow-dropup-circle'\nimport BaseHeader from '../components/BaseHeader.vue'\nimport BaseSidebar from '../components/BaseSidebar.vue'\nimport BaseToast from '../components/BaseToast.vue'\n\n@Component({\n  components: {\n    BaseHeader,\n    BaseSidebar,\n    BaseToast,\n    ArrowUpIcon\n  }\n})\n\nexport default class DefaultLayout extends Vue {\n  showArrowToTop = false;\n\n  @State settingActiveTheme;\n  @State isShowSidebar;\n\n  @Mutation setShowSidebar;\n\n  @Action initDataFromBrowserStorage;\n  @Action setWebshareSupport;\n\n  hideSidebar(): void {\n    this.setShowSidebar(false)\n  }\n\n  handleScroll(): void {\n    this.showArrowToTop = window.pageYOffset > 2000\n  }\n\n  mounted() {\n    window.addEventListener('scroll', this.handleScroll)\n  }\n\n  beforedestroy() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n}\n```\n\nAs you can see from the code example above, I use [vue-property-decorator ‚ÜóÔ∏è](https://github.com/kaorun343/vue-property-decorator) to define the component and use [vuex-class ‚ÜóÔ∏è](https://github.com/ktsn/vuex-class) to bind the Vuex Store that was made beforehand so that it can be used in the component. Please visit the respective links to learn more about what we can and cannot do with `vue-property-decorator` or` vuex-class`.\n\n## Refactor the Jest Config\n\nThere is almost no need to change unit tests other than the path and file name that we are most likely to change the name and location. We only need to match the Jest configuration to support TypeScript as in the following code example:\n\n```javascript\nmodule.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '<rootDir>/$1',\n    '^@/(.*)$': '<rootDir>/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'ts', 'vue', 'json'],\n  transform: {\n    '^.+.tsx?$': '<rootDir>/node_modules/ts-jest',\n    '^.+.js$': '<rootDir>/node_modules/babel-jest',\n    '^.+.vue$': '<rootDir>/node_modules/vue-jest'\n  },\n  globals: {\n    'ts-jest': {\n      diagnostics: false\n    }\n  }\n}\n```\n\n## Repository\n\n[üêô https://github.com/mazipan/quran-offline ‚ÜóÔ∏è](https://github.com/mazipan/quran-offline)\n\n### Hopefully useful...",html:"<p>As we all know that the default from the Nuxt project will be to create a code based on JavaScript Vanilla. Whereas the increasingly widespread use of TypeScript among JavaScript developers makes me personally interested in implementing the use of TypeScript on my open source code project.</p>\n<img v-lazyload src=\"/images/placeholder-1x1.png\" data-src=\"/content-images/migrate-nuxt-to-typescript/quran-offline.png\" alt=\"Quran Offline\" height=\"200px\" width=\"200px\">\n<p>The following are the things I worked on in the migration process:</p>\n<h2>Adding tsconfig.json</h2>\n<pre><code class=\"language-javascript\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;esnext&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;lib&quot;: [&quot;esnext&quot;, &quot;esnext.asynciterable&quot;, &quot;dom&quot;],\n    &quot;esModuleInterop&quot;: true,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;allowJs&quot;: true,\n    &quot;sourceMap&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: false,\n    &quot;strictNullChecks&quot;: false,\n    &quot;noEmit&quot;: true,\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;~/*&quot;: [&quot;./*&quot;],\n      &quot;@/*&quot;: [&quot;./*&quot;]\n    },\n    &quot;types&quot;: [&quot;@types/jest&quot;, &quot;@types/node&quot;, &quot;@nuxt/vue-app&quot;]\n  },\n  &quot;exclude&quot;: [\n    &quot;nuxt.config.ts&quot;,\n    &quot;node_modules/**&quot;,\n    &quot;dist/**&quot;,\n    &quot;.nuxt/**&quot;,\n    &quot;tests/**&quot;\n  ]\n}\n</code></pre>\n<p>To add this file, I also need to add the following dependencies:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;@nuxt/typescript&quot;: &quot;2.7.1&quot;,\n  &quot;@types/jest&quot;: &quot;24.0.13&quot;,\n  &quot;@types/node&quot;: &quot;11.13.10&quot;,\n  &quot;typescript&quot;: &quot;3.4.5&quot;\n}\n</code></pre>\n<h2>Update eslintrc.js</h2>\n<pre><code class=\"language-javascript\">module.exports = {\n  plugins: ['@typescript-eslint'],\n  parserOptions: {\n    parser: '@typescript-eslint/parser'\n  },\n  extends: [\n    '@nuxtjs',\n    'plugin:nuxt/recommended',\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unused-vars': 'off',\n    'vue/component-name-in-template-casing': [\n      'error',\n      'PascalCase',\n      {\n        ignores: ['nuxt', 'nuxt-link', 'nuxt-child', 'no-ssr']\n      }\n    ],\n    'vue/html-closing-bracket-newline': [\n      'error',\n      {\n        singleline: 'never',\n        multiline: 'never'\n      }\n    ]\n  }\n}\n</code></pre>\n<p>And add some of the following dependencies:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;@nuxtjs/eslint-config&quot;: &quot;0.0.1&quot;,\n  &quot;@typescript-eslint/eslint-plugin&quot;: &quot;1.9.0&quot;\n}\n</code></pre>\n<h2>Rename nuxt.config.js to nuxt.config.ts</h2>\n<p>Change the file extension and make a few changes to the following:</p>\n<pre><code class=\"language-javascript\">import NuxtConfiguration from '@nuxt/config'\nimport {\n  Configuration as WebpackConfiguration\n} from 'webpack'\n\nconst config: NuxtConfiguration = {\n  mode: 'universal',\n  head: {},\n  build: {\n    extend(config: WebpackConfiguration, ctx) {\n    }\n  }\n}\n\nexport default config\n</code></pre>\n<h2>Refactor the Vuex Store</h2>\n<p>Because almost all the components in my project have used the Vuex Store, so I put this as the first for me to refactor before refactor the component. To use Vuex with TypeScript there are few changes compared to when using regular JavaScript, here are the changes that I am working on:</p>\n<h3>Classic Store</h3>\n<p>In this project I still use the Classic Store, which is actually deprecated and will be removed in Nuxt v3 in the future, the following classic store that I created in the <code>store/index.ts</code> file:</p>\n<pre><code class=\"language-javascript\">import Vuex from 'vuex'\n\nimport { state } from './state'\nimport { mutations } from './mutations'\nimport { actions } from './actions'\n\nconst createStore = () =&gt; {\n  return new Vuex.Store({\n    state: state(),\n    mutations,\n    actions\n  })\n}\n\nexport default createStore\n</code></pre>\n<h3>State</h3>\n<p>In the <code>state.ts</code> file, I create an interface that is the type definitions of the state and creates a state with various initial value like the following example:</p>\n<pre><code class=\"language-javascript\">export interface StateType {\n  isShowSidebar: boolean,\n}\n\n// initial state\nexport const state = (): StateType =&gt; ({\n  isShowSidebar: false\n})\n</code></pre>\n<h3>Mutations</h3>\n<p>Vuex itself has provided support for TypeScript by providing data types in return for Mutations by simply importing <code>MutationTree</code> from Vuex, following the sample code:</p>\n<pre><code class=\"language-javascript\">import { MutationTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const mutations: MutationTree&lt;StateType&gt; = {\n  [Types.SET_SHOW_SIDEBAR](state: StateType, data: boolean) {\n    state.isShowSidebar = data\n  }\n}\n</code></pre>\n<h3>Actions</h3>\n<p>For the actions themselves it is almost similar to the mutations in which the data type from Vuex has been provided, such as the following code example:</p>\n<pre><code class=\"language-javascript\">import { ActionTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const actions: ActionTree&lt;StateType, StateType&gt; = {\n  setShowSidebar({ commit }, payload) {\n    commit(Types.SET_SHOW_SIDEBAR, payload)\n  }\n}\n</code></pre>\n<h2>Refactor the Components</h2>\n<p>After successfully refactor the Vuex Store, then we will refactor our component code to support TypeScript.</p>\n<p>To support TypeScript, we need to add some new dependencies like the following:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;vue-class-component&quot;: &quot;7.1.0&quot;,\n  &quot;vue-property-decorator&quot;: &quot;8.1.1&quot;,\n  &quot;vuex-class&quot;: &quot;0.3.2&quot;\n}\n</code></pre>\n<p>First of all, of course we have to change the code in the single component file Vue that previously only <code>&lt;script&gt;&lt;/script&gt;</code> becomes <code>&lt;script lang = &quot;ts&quot;&gt; &lt;/script&gt;</code>so we can support the TypeScript code in the script section . And here is the <code>default.vue</code> layout example that I refactor using TypeScript:</p>\n<pre><code class=\"language-javascript\">import { Component, Vue } from 'vue-property-decorator'\nimport { State, Mutation, Action } from 'vuex-class'\n\nimport ArrowUpIcon from 'vue-ionicons/dist/js/ios-arrow-dropup-circle'\nimport BaseHeader from '../components/BaseHeader.vue'\nimport BaseSidebar from '../components/BaseSidebar.vue'\nimport BaseToast from '../components/BaseToast.vue'\n\n@Component({\n  components: {\n    BaseHeader,\n    BaseSidebar,\n    BaseToast,\n    ArrowUpIcon\n  }\n})\n\nexport default class DefaultLayout extends Vue {\n  showArrowToTop = false;\n\n  @State settingActiveTheme;\n  @State isShowSidebar;\n\n  @Mutation setShowSidebar;\n\n  @Action initDataFromBrowserStorage;\n  @Action setWebshareSupport;\n\n  hideSidebar(): void {\n    this.setShowSidebar(false)\n  }\n\n  handleScroll(): void {\n    this.showArrowToTop = window.pageYOffset &gt; 2000\n  }\n\n  mounted() {\n    window.addEventListener('scroll', this.handleScroll)\n  }\n\n  beforedestroy() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n}\n</code></pre>\n<p>As you can see from the code example above, I use <a href=\"https://github.com/kaorun343/vue-property-decorator\">vue-property-decorator ‚ÜóÔ∏è</a> to define the component and use <a href=\"https://github.com/ktsn/vuex-class\">vuex-class ‚ÜóÔ∏è</a> to bind the Vuex Store that was made beforehand so that it can be used in the component. Please visit the respective links to learn more about what we can and cannot do with <code>vue-property-decorator</code> or<code> vuex-class</code>.</p>\n<h2>Refactor the Jest Config</h2>\n<p>There is almost no need to change unit tests other than the path and file name that we are most likely to change the name and location. We only need to match the Jest configuration to support TypeScript as in the following code example:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '&lt;rootDir&gt;/$1',\n    '^@/(.*)$': '&lt;rootDir&gt;/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'ts', 'vue', 'json'],\n  transform: {\n    '^.+.tsx?$': '&lt;rootDir&gt;/node_modules/ts-jest',\n    '^.+.js$': '&lt;rootDir&gt;/node_modules/babel-jest',\n    '^.+.vue$': '&lt;rootDir&gt;/node_modules/vue-jest'\n  },\n  globals: {\n    'ts-jest': {\n      diagnostics: false\n    }\n  }\n}\n</code></pre>\n<h2>Repository</h2>\n<p><a href=\"https://github.com/mazipan/quran-offline\">üêô https://github.com/mazipan/quran-offline ‚ÜóÔ∏è</a></p>\n<h3>Hopefully useful...</h3>\n",attributes:{title:"Migrate Nuxt to TypeScript",slug:"migrate-nuxt-to-typescript",date:"2019-05-15",minute2read:10,description:"Story telling about the steps that I worked on when migrating the Nuxt project from using vanilla JavaScript to using TypeScript",categories:["javascript","nuxt","typescript"],cover:"https://www.mazipan.xyz/content-images/migrate-nuxt-to-typescript/quran-offline.png",_meta:{resourcePath:"/home/travis/build/mazipan/blog-2.0/contents/published/migrate-nuxt-to-typescript/en.md"}},vue:{render:'return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"content-markdown"},[_c(\'p\',[_vm._v("As we all know that the default from the Nuxt project will be to create a code based on JavaScript Vanilla. Whereas the increasingly widespread use of TypeScript among JavaScript developers makes me personally interested in implementing the use of TypeScript on my open source code project.")]),_vm._v(" "),_c(\'img\',{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{"src":"/images/placeholder-1x1.png","data-src":"/content-images/migrate-nuxt-to-typescript/quran-offline.png","alt":"Quran Offline","height":"200px","width":"200px"}}),_vm._v(" "),_c(\'p\',[_vm._v("The following are the things I worked on in the migration process:")]),_vm._v(" "),_c(\'h2\',[_vm._v("Adding tsconfig.json")]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'p\',[_vm._v("To add this file, I also need to add the following dependencies:")]),_vm._v(" "),_vm._m(1),_vm._v(" "),_c(\'h2\',[_vm._v("Update eslintrc.js")]),_vm._v(" "),_vm._m(2),_vm._v(" "),_c(\'p\',[_vm._v("And add some of the following dependencies:")]),_vm._v(" "),_vm._m(3),_vm._v(" "),_c(\'h2\',[_vm._v("Rename nuxt.config.js to nuxt.config.ts")]),_vm._v(" "),_c(\'p\',[_vm._v("Change the file extension and make a few changes to the following:")]),_vm._v(" "),_vm._m(4),_vm._v(" "),_c(\'h2\',[_vm._v("Refactor the Vuex Store")]),_vm._v(" "),_c(\'p\',[_vm._v("Because almost all the components in my project have used the Vuex Store, so I put this as the first for me to refactor before refactor the component. To use Vuex with TypeScript there are few changes compared to when using regular JavaScript, here are the changes that I am working on:")]),_vm._v(" "),_c(\'h3\',[_vm._v("Classic Store")]),_vm._v(" "),_vm._m(5),_vm._v(" "),_vm._m(6),_vm._v(" "),_c(\'h3\',[_vm._v("State")]),_vm._v(" "),_vm._m(7),_vm._v(" "),_vm._m(8),_vm._v(" "),_c(\'h3\',[_vm._v("Mutations")]),_vm._v(" "),_vm._m(9),_vm._v(" "),_vm._m(10),_vm._v(" "),_c(\'h3\',[_vm._v("Actions")]),_vm._v(" "),_c(\'p\',[_vm._v("For the actions themselves it is almost similar to the mutations in which the data type from Vuex has been provided, such as the following code example:")]),_vm._v(" "),_vm._m(11),_vm._v(" "),_c(\'h2\',[_vm._v("Refactor the Components")]),_vm._v(" "),_c(\'p\',[_vm._v("After successfully refactor the Vuex Store, then we will refactor our component code to support TypeScript.")]),_vm._v(" "),_c(\'p\',[_vm._v("To support TypeScript, we need to add some new dependencies like the following:")]),_vm._v(" "),_vm._m(12),_vm._v(" "),_vm._m(13),_vm._v(" "),_vm._m(14),_vm._v(" "),_vm._m(15),_vm._v(" "),_c(\'h2\',[_vm._v("Refactor the Jest Config")]),_vm._v(" "),_c(\'p\',[_vm._v("There is almost no need to change unit tests other than the path and file name that we are most likely to change the name and location. We only need to match the Jest configuration to support TypeScript as in the following code example:")]),_vm._v(" "),_vm._m(16),_vm._v(" "),_c(\'h2\',[_vm._v("Repository")]),_vm._v(" "),_vm._m(17),_vm._v(" "),_c(\'h3\',[_vm._v("Hopefully useful...")])]) }',staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"compilerOptions\\": {\\n    \\"target\\": \\"es5\\",\\n    \\"module\\": \\"esnext\\",\\n    \\"moduleResolution\\": \\"node\\",\\n    \\"lib\\": [\\"esnext\\", \\"esnext.asynciterable\\", \\"dom\\"],\\n    \\"esModuleInterop\\": true,\\n    \\"experimentalDecorators\\": true,\\n    \\"resolveJsonModule\\": true,\\n    \\"allowJs\\": true,\\n    \\"sourceMap\\": true,\\n    \\"strict\\": true,\\n    \\"noImplicitAny\\": false,\\n    \\"strictNullChecks\\": false,\\n    \\"noEmit\\": true,\\n    \\"baseUrl\\": \\".\\",\\n    \\"paths\\": {\\n      \\"~/*\\": [\\"./*\\"],\\n      \\"@/*\\": [\\"./*\\"]\\n    },\\n    \\"types\\": [\\"@types/jest\\", \\"@types/node\\", \\"@nuxt/vue-app\\"]\\n  },\\n  \\"exclude\\": [\\n    \\"nuxt.config.ts\\",\\n    \\"node_modules/**\\",\\n    \\"dist/**\\",\\n    \\".nuxt/**\\",\\n    \\"tests/**\\"\\n  ]\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"@nuxt/typescript\\": \\"2.7.1\\",\\n  \\"@types/jest\\": \\"24.0.13\\",\\n  \\"@types/node\\": \\"11.13.10\\",\\n  \\"typescript\\": \\"3.4.5\\"\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  plugins: [\'@typescript-eslint\'],\\n  parserOptions: {\\n    parser: \'@typescript-eslint/parser\'\\n  },\\n  extends: [\\n    \'@nuxtjs\',\\n    \'plugin:nuxt/recommended\',\\n  ],\\n  rules: {\\n    \'no-console\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\\n    \'no-debugger\': process.env.NODE_ENV === \'production\' ? \'error\' : \'off\',\\n    \'no-unused-vars\': \'off\',\\n    \'vue/component-name-in-template-casing\': [\\n      \'error\',\\n      \'PascalCase\',\\n      {\\n        ignores: [\'nuxt\', \'nuxt-link\', \'nuxt-child\', \'no-ssr\']\\n      }\\n    ],\\n    \'vue/html-closing-bracket-newline\': [\\n      \'error\',\\n      {\\n        singleline: \'never\',\\n        multiline: \'never\'\\n      }\\n    ]\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"@nuxtjs/eslint-config\\": \\"0.0.1\\",\\n  \\"@typescript-eslint/eslint-plugin\\": \\"1.9.0\\"\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import NuxtConfiguration from \'@nuxt/config\'\\nimport {\\n  Configuration as WebpackConfiguration\\n} from \'webpack\'\\n\\nconst config: NuxtConfiguration = {\\n  mode: \'universal\',\\n  head: {},\\n  build: {\\n    extend(config: WebpackConfiguration, ctx) {\\n    }\\n  }\\n}\\n\\nexport default config\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In this project I still use the Classic Store, which is actually deprecated and will be removed in Nuxt v3 in the future, the following classic store that I created in the "),_c(\'code\',{pre:true},[_vm._v("store/index.ts")]),_vm._v(" file:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import Vuex from \'vuex\'\\n\\nimport { state } from \'./state\'\\nimport { mutations } from \'./mutations\'\\nimport { actions } from \'./actions\'\\n\\nconst createStore = () => {\\n  return new Vuex.Store({\\n    state: state(),\\n    mutations,\\n    actions\\n  })\\n}\\n\\nexport default createStore\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("In the "),_c(\'code\',{pre:true},[_vm._v("state.ts")]),_vm._v(" file, I create an interface that is the type definitions of the state and creates a state with various initial value like the following example:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("export interface StateType {\\n  isShowSidebar: boolean,\\n}\\n\\n// initial state\\nexport const state = (): StateType => ({\\n  isShowSidebar: false\\n})\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("Vuex itself has provided support for TypeScript by providing data types in return for Mutations by simply importing "),_c(\'code\',{pre:true},[_vm._v("MutationTree")]),_vm._v(" from Vuex, following the sample code:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { MutationTree } from \'vuex\'\\nimport { StateType } from \'./state\'\\nimport { Types } from \'./types\'\\n\\nexport const mutations: MutationTree<StateType> = {\\n  [Types.SET_SHOW_SIDEBAR](state: StateType, data: boolean) {\\n    state.isShowSidebar = data\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { ActionTree } from \'vuex\'\\nimport { StateType } from \'./state\'\\nimport { Types } from \'./types\'\\n\\nexport const actions: ActionTree<StateType, StateType> = {\\n  setShowSidebar({ commit }, payload) {\\n    commit(Types.SET_SHOW_SIDEBAR, payload)\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"vue-class-component\\": \\"7.1.0\\",\\n  \\"vue-property-decorator\\": \\"8.1.1\\",\\n  \\"vuex-class\\": \\"0.3.2\\"\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("First of all, of course we have to change the code in the single component file Vue that previously only "),_c(\'code\',{pre:true},[_vm._v("<script><\/script>")]),_vm._v(" becomes "),_c(\'code\',{pre:true},[_vm._v("<script lang = \\"ts\\"> <\/script>")]),_vm._v("so we can support the TypeScript code in the script section . And here is the "),_c(\'code\',{pre:true},[_vm._v("default.vue")]),_vm._v(" layout example that I refactor using TypeScript:")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { Component, Vue } from \'vue-property-decorator\'\\nimport { State, Mutation, Action } from \'vuex-class\'\\n\\nimport ArrowUpIcon from \'vue-ionicons/dist/js/ios-arrow-dropup-circle\'\\nimport BaseHeader from \'../components/BaseHeader.vue\'\\nimport BaseSidebar from \'../components/BaseSidebar.vue\'\\nimport BaseToast from \'../components/BaseToast.vue\'\\n\\n@Component({\\n  components: {\\n    BaseHeader,\\n    BaseSidebar,\\n    BaseToast,\\n    ArrowUpIcon\\n  }\\n})\\n\\nexport default class DefaultLayout extends Vue {\\n  showArrowToTop = false;\\n\\n  @State settingActiveTheme;\\n  @State isShowSidebar;\\n\\n  @Mutation setShowSidebar;\\n\\n  @Action initDataFromBrowserStorage;\\n  @Action setWebshareSupport;\\n\\n  hideSidebar(): void {\\n    this.setShowSidebar(false)\\n  }\\n\\n  handleScroll(): void {\\n    this.showArrowToTop = window.pageYOffset > 2000\\n  }\\n\\n  mounted() {\\n    window.addEventListener(\'scroll\', this.handleScroll)\\n  }\\n\\n  beforedestroy() {\\n    window.removeEventListener(\'scroll\', this.handleScroll)\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("As you can see from the code example above, I use "),_c(\'a\',{attrs:{"href":"https://github.com/kaorun343/vue-property-decorator"}},[_vm._v("vue-property-decorator ‚ÜóÔ∏è")]),_vm._v(" to define the component and use "),_c(\'a\',{attrs:{"href":"https://github.com/ktsn/vuex-class"}},[_vm._v("vuex-class ‚ÜóÔ∏è")]),_vm._v(" to bind the Vuex Store that was made beforehand so that it can be used in the component. Please visit the respective links to learn more about what we can and cannot do with "),_c(\'code\',{pre:true},[_vm._v("vue-property-decorator")]),_vm._v(" or"),_c(\'code\',{pre:true},[_vm._v(" vuex-class")]),_vm._v(".")]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  moduleNameMapper: {\\n    \'^~/(.*)$\': \'<rootDir>/$1\',\\n    \'^@/(.*)$\': \'<rootDir>/$1\',\\n    \'^vue$\': \'vue/dist/vue.common.js\'\\n  },\\n  moduleFileExtensions: [\'js\', \'ts\', \'vue\', \'json\'],\\n  transform: {\\n    \'^.+.tsx?$\': \'<rootDir>/node_modules/ts-jest\',\\n    \'^.+.js$\': \'<rootDir>/node_modules/babel-jest\',\\n    \'^.+.vue$\': \'<rootDir>/node_modules/vue-jest\'\\n  },\\n  globals: {\\n    \'ts-jest\': {\\n      diagnostics: false\\n    }\\n  }\\n}\\n")])]) },function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_c(\'a\',{attrs:{"href":"https://github.com/mazipan/quran-offline"}},[_vm._v("üêô https://github.com/mazipan/quran-offline ‚ÜóÔ∏è")])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content-markdown"},[n("p",[e._v("As we all know that the default from the Nuxt project will be to create a code based on JavaScript Vanilla. Whereas the increasingly widespread use of TypeScript among JavaScript developers makes me personally interested in implementing the use of TypeScript on my open source code project.")]),e._v(" "),n("img",{directives:[{name:"lazyload",rawName:"v-lazyload"}],attrs:{src:"/images/placeholder-1x1.png","data-src":"/content-images/migrate-nuxt-to-typescript/quran-offline.png",alt:"Quran Offline",height:"200px",width:"200px"}}),e._v(" "),n("p",[e._v("The following are the things I worked on in the migration process:")]),e._v(" "),n("h2",[e._v("Adding tsconfig.json")]),e._v(" "),e._m(0),e._v(" "),n("p",[e._v("To add this file, I also need to add the following dependencies:")]),e._v(" "),e._m(1),e._v(" "),n("h2",[e._v("Update eslintrc.js")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("And add some of the following dependencies:")]),e._v(" "),e._m(3),e._v(" "),n("h2",[e._v("Rename nuxt.config.js to nuxt.config.ts")]),e._v(" "),n("p",[e._v("Change the file extension and make a few changes to the following:")]),e._v(" "),e._m(4),e._v(" "),n("h2",[e._v("Refactor the Vuex Store")]),e._v(" "),n("p",[e._v("Because almost all the components in my project have used the Vuex Store, so I put this as the first for me to refactor before refactor the component. To use Vuex with TypeScript there are few changes compared to when using regular JavaScript, here are the changes that I am working on:")]),e._v(" "),n("h3",[e._v("Classic Store")]),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),n("h3",[e._v("State")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),n("h3",[e._v("Mutations")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),n("h3",[e._v("Actions")]),e._v(" "),n("p",[e._v("For the actions themselves it is almost similar to the mutations in which the data type from Vuex has been provided, such as the following code example:")]),e._v(" "),e._m(11),e._v(" "),n("h2",[e._v("Refactor the Components")]),e._v(" "),n("p",[e._v("After successfully refactor the Vuex Store, then we will refactor our component code to support TypeScript.")]),e._v(" "),n("p",[e._v("To support TypeScript, we need to add some new dependencies like the following:")]),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),n("h2",[e._v("Refactor the Jest Config")]),e._v(" "),n("p",[e._v("There is almost no need to change unit tests other than the path and file name that we are most likely to change the name and location. We only need to match the Jest configuration to support TypeScript as in the following code example:")]),e._v(" "),e._m(16),e._v(" "),n("h2",[e._v("Repository")]),e._v(" "),e._m(17),e._v(" "),n("h3",[e._v("Hopefully useful...")])])},this.$options.staticRenderFns=[function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "compilerOptions": {\n    "target": "es5",\n    "module": "esnext",\n    "moduleResolution": "node",\n    "lib": ["esnext", "esnext.asynciterable", "dom"],\n    "esModuleInterop": true,\n    "experimentalDecorators": true,\n    "resolveJsonModule": true,\n    "allowJs": true,\n    "sourceMap": true,\n    "strict": true,\n    "noImplicitAny": false,\n    "strictNullChecks": false,\n    "noEmit": true,\n    "baseUrl": ".",\n    "paths": {\n      "~/*": ["./*"],\n      "@/*": ["./*"]\n    },\n    "types": ["@types/jest", "@types/node", "@nuxt/vue-app"]\n  },\n  "exclude": [\n    "nuxt.config.ts",\n    "node_modules/**",\n    "dist/**",\n    ".nuxt/**",\n    "tests/**"\n  ]\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "@nuxt/typescript": "2.7.1",\n  "@types/jest": "24.0.13",\n  "@types/node": "11.13.10",\n  "typescript": "3.4.5"\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("module.exports = {\n  plugins: ['@typescript-eslint'],\n  parserOptions: {\n    parser: '@typescript-eslint/parser'\n  },\n  extends: [\n    '@nuxtjs',\n    'plugin:nuxt/recommended',\n  ],\n  rules: {\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unused-vars': 'off',\n    'vue/component-name-in-template-casing': [\n      'error',\n      'PascalCase',\n      {\n        ignores: ['nuxt', 'nuxt-link', 'nuxt-child', 'no-ssr']\n      }\n    ],\n    'vue/html-closing-bracket-newline': [\n      'error',\n      {\n        singleline: 'never',\n        multiline: 'never'\n      }\n    ]\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "@nuxtjs/eslint-config": "0.0.1",\n  "@typescript-eslint/eslint-plugin": "1.9.0"\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import NuxtConfiguration from '@nuxt/config'\nimport {\n  Configuration as WebpackConfiguration\n} from 'webpack'\n\nconst config: NuxtConfiguration = {\n  mode: 'universal',\n  head: {},\n  build: {\n    extend(config: WebpackConfiguration, ctx) {\n    }\n  }\n}\n\nexport default config\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In this project I still use the Classic Store, which is actually deprecated and will be removed in Nuxt v3 in the future, the following classic store that I created in the "),t("code",{pre:!0},[this._v("store/index.ts")]),this._v(" file:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import Vuex from 'vuex'\n\nimport { state } from './state'\nimport { mutations } from './mutations'\nimport { actions } from './actions'\n\nconst createStore = () => {\n  return new Vuex.Store({\n    state: state(),\n    mutations,\n    actions\n  })\n}\n\nexport default createStore\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In the "),t("code",{pre:!0},[this._v("state.ts")]),this._v(" file, I create an interface that is the type definitions of the state and creates a state with various initial value like the following example:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("export interface StateType {\n  isShowSidebar: boolean,\n}\n\n// initial state\nexport const state = (): StateType => ({\n  isShowSidebar: false\n})\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Vuex itself has provided support for TypeScript by providing data types in return for Mutations by simply importing "),t("code",{pre:!0},[this._v("MutationTree")]),this._v(" from Vuex, following the sample code:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import { MutationTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const mutations: MutationTree<StateType> = {\n  [Types.SET_SHOW_SIDEBAR](state: StateType, data: boolean) {\n    state.isShowSidebar = data\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import { ActionTree } from 'vuex'\nimport { StateType } from './state'\nimport { Types } from './types'\n\nexport const actions: ActionTree<StateType, StateType> = {\n  setShowSidebar({ commit }, payload) {\n    commit(Types.SET_SHOW_SIDEBAR, payload)\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v('{\n  "vue-class-component": "7.1.0",\n  "vue-property-decorator": "8.1.1",\n  "vuex-class": "0.3.2"\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("First of all, of course we have to change the code in the single component file Vue that previously only "),t("code",{pre:!0},[this._v("<script><\/script>")]),this._v(" becomes "),t("code",{pre:!0},[this._v('<script lang = "ts"> <\/script>')]),this._v("so we can support the TypeScript code in the script section . And here is the "),t("code",{pre:!0},[this._v("default.vue")]),this._v(" layout example that I refactor using TypeScript:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("import { Component, Vue } from 'vue-property-decorator'\nimport { State, Mutation, Action } from 'vuex-class'\n\nimport ArrowUpIcon from 'vue-ionicons/dist/js/ios-arrow-dropup-circle'\nimport BaseHeader from '../components/BaseHeader.vue'\nimport BaseSidebar from '../components/BaseSidebar.vue'\nimport BaseToast from '../components/BaseToast.vue'\n\n@Component({\n  components: {\n    BaseHeader,\n    BaseSidebar,\n    BaseToast,\n    ArrowUpIcon\n  }\n})\n\nexport default class DefaultLayout extends Vue {\n  showArrowToTop = false;\n\n  @State settingActiveTheme;\n  @State isShowSidebar;\n\n  @Mutation setShowSidebar;\n\n  @Action initDataFromBrowserStorage;\n  @Action setWebshareSupport;\n\n  hideSidebar(): void {\n    this.setShowSidebar(false)\n  }\n\n  handleScroll(): void {\n    this.showArrowToTop = window.pageYOffset > 2000\n  }\n\n  mounted() {\n    window.addEventListener('scroll', this.handleScroll)\n  }\n\n  beforedestroy() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("As you can see from the code example above, I use "),n("a",{attrs:{href:"https://github.com/kaorun343/vue-property-decorator"}},[e._v("vue-property-decorator ‚ÜóÔ∏è")]),e._v(" to define the component and use "),n("a",{attrs:{href:"https://github.com/ktsn/vuex-class"}},[e._v("vuex-class ‚ÜóÔ∏è")]),e._v(" to bind the Vuex Store that was made beforehand so that it can be used in the component. Please visit the respective links to learn more about what we can and cannot do with "),n("code",{pre:!0},[e._v("vue-property-decorator")]),e._v(" or"),n("code",{pre:!0},[e._v(" vuex-class")]),e._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[this._v("module.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '<rootDir>/$1',\n    '^@/(.*)$': '<rootDir>/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'ts', 'vue', 'json'],\n  transform: {\n    '^.+.tsx?$': '<rootDir>/node_modules/ts-jest',\n    '^.+.js$': '<rootDir>/node_modules/babel-jest',\n    '^.+.vue$': '<rootDir>/node_modules/vue-jest'\n  },\n  globals: {\n    'ts-jest': {\n      diagnostics: false\n    }\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("a",{attrs:{href:"https://github.com/mazipan/quran-offline"}},[this._v("üêô https://github.com/mazipan/quran-offline ‚ÜóÔ∏è")])])}]}}}}}}]);